<?xml version="1.0" encoding="UTF-8"?>
<sourceUnit>
   <pragmaDirective>pragma<pragmaSolidity>solidity<version>
            <versionOperator>^</versionOperator>
            <versionLiteral>0.5.0</versionLiteral>
         </version>
      </pragmaSolidity>;</pragmaDirective>
   <contractDefinition>contract<identifier>ERC20</identifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>balanceOf</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_owner</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>balance</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transfer</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                     <identifier>success</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>GLOLocker</identifier>{<contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>nth1</identifier>=<expression>
               <primaryExpression>
                  <numberLiteral>
                     <decimalNumber>0</decimalNumber>
                  </numberLiteral>
               </primaryExpression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <constantType>constant</constantType>
            <visibleType>public</visibleType>
            <identifier>max1</identifier>=<expression>
               <primaryExpression>
                  <numberLiteral>
                     <decimalNumber>97</decimalNumber>
                  </numberLiteral>
               </primaryExpression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <userDefinedTypeName>
                  <identifier>ERC20</identifier>
               </userDefinedTypeName>
            </typeName>
            <constantType>constant</constantType>
            <identifier>token</identifier>=<expression>
               <functionCall>
                  <functionName>
                     <identifier>ERC20</identifier>
                  </functionName>
                  <callArguments>
                     <tupleExpression>(<expression>
                           <primaryExpression>
                              <numberLiteral>
                                 <hexNumber>0xC0e6737A29DE7a00e2f6011924eB257106CB082f</hexNumber>
                              </numberLiteral>
                           </primaryExpression>
                        </expression>)</tupleExpression>
                  </callArguments>
               </functionCall>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>address</elementaryTypeName>
            </typeName>
            <identifier>HBWallet</identifier>=<expression>
               <typeConversion>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>(<expression>
                     <primaryExpression>
                        <numberLiteral>
                           <hexNumber>0xEc7ba74789694d0d03D458965370Dc7cF2FE75Ba</hexNumber>
                        </numberLiteral>
                     </primaryExpression>
                  </expression>)</typeConversion>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <userDefinedTypeName>
                  <identifier>ERC20</identifier>
               </userDefinedTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>hbwalletToken</identifier>=<expression>
               <functionCall>
                  <functionName>
                     <identifier>ERC20</identifier>
                  </functionName>
                  <callArguments>
                     <tupleExpression>(<expression>
                           <primaryExpression>
                              <identifier>HBWallet</identifier>
                           </primaryExpression>
                        </expression>)</tupleExpression>
                  </callArguments>
               </functionCall>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <userDefinedTypeName>
                  <identifier>ERC20</identifier>
               </userDefinedTypeName>
            </typeName>
            <identifier>ora</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <userDefinedTypeName>
                  <identifier>ERC20</identifier>
               </userDefinedTypeName>
            </typeName>
            <identifier>r</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionFallBackDefinition>function<parameterList>()</parameterList>
            <visibleType>external</visibleType>
            <block>{<statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>nth1</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>max1</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>token</identifier>
                                       </primaryExpression>
                                    </expression>.<functionCall>
                                       <functionName>
                                          <identifier>transfer</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <numberLiteral>
                                                      <hexNumber>0x2EEabfdAe52e02C14126CbEb1706fcE16a63ba28</hexNumber>
                                                   </numberLiteral>
                                                </primaryExpression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <numberLiteral>
                                                      <decimalNumber>500000000000000000000</decimalNumber>
                                                   </numberLiteral>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>nth1</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <twoPlusMinusOperator>
                                       <incrementOperator>++</incrementOperator>
                                    </twoPlusMinusOperator>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>}</block>
         </functionFallBackDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>lize</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <block>{<statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>nth1</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>max1</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>hbwalletToken</identifier>
                                       </primaryExpression>
                                    </expression>.<functionCall>
                                       <functionName>
                                          <identifier>transfer</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <numberLiteral>
                                                      <hexNumber>0xB13B4791B1dd41E6cf4D541D9e62bAD7744AEdF4</hexNumber>
                                                   </numberLiteral>
                                                </primaryExpression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <numberLiteral>
                                                      <decimalNumber>10000000000000000000000</decimalNumber>
                                                   </numberLiteral>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>nth1</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <twoPlusMinusOperator>
                                       <incrementOperator>++</incrementOperator>
                                    </twoPlusMinusOperator>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>oraclize</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>ora</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>ERC20</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <hexNumber>0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed</hexNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>nth1</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>max1</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>ora</identifier>
                                       </primaryExpression>
                                    </expression>.<functionCall>
                                       <functionName>
                                          <identifier>transfer</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <numberLiteral>
                                                      <hexNumber>0xd585265Cd9377870e77a94a1EABb302278257CA3</hexNumber>
                                                   </numberLiteral>
                                                </primaryExpression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <numberLiteral>
                                                      <decimalNumber>10000000000000000000000</decimalNumber>
                                                   </numberLiteral>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>nth1</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <twoPlusMinusOperator>
                                       <incrementOperator>++</incrementOperator>
                                    </twoPlusMinusOperator>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionFallBackDefinition>function<parameterList>()</parameterList>
            <visibleType>external</visibleType>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>r</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>ERC20</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <hexNumber>0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1</hexNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>nth1</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>max1</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>r</identifier>
                                       </primaryExpression>
                                    </expression>.<functionCall>
                                       <functionName>
                                          <identifier>transfer</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <numberLiteral>
                                                      <hexNumber>0x236e3428EFEf787DA7B82045B88C26021CE6a199</hexNumber>
                                                   </numberLiteral>
                                                </primaryExpression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <numberLiteral>
                                                      <decimalNumber>1676040000000000000000</decimalNumber>
                                                   </numberLiteral>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>nth1</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <twoPlusMinusOperator>
                                       <incrementOperator>++</incrementOperator>
                                    </twoPlusMinusOperator>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>}</block>
         </functionFallBackDefinition>
      </contractPartDefinition>
   </contractDefinition>&lt;EOF&gt;</sourceUnit>