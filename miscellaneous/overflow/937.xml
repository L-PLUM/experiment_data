<?xml version="1.0" encoding="UTF-8"?>
<sourceUnit>
   <pragmaDirective>pragma<pragmaSolidity>solidity<version>
            <versionOperator>^</versionOperator>
            <versionLiteral>0.5.2</versionLiteral>
         </version>
      </pragmaSolidity>;</pragmaDirective>
   <contractDefinition>contract<identifier>Token</identifier>{<contractPartDefinition>
         <eventDefinition>event<identifier>Transfer</identifier>
            <indexedParameterList>(<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>from</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>to</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>value</identifier>
               </indexedParameter>)</indexedParameterList>;</eventDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <eventDefinition>event<identifier>Approval</identifier>
            <indexedParameterList>(<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>owner</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>spender</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>value</identifier>
               </indexedParameter>)</indexedParameterList>;</eventDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transfer</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transferFrom</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>from</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>approve</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>spender</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>balanceOf</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>owner</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>allowance</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>owner</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>spender</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>totalSupply</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>}</contractDefinition>
   <libraryDefinition>library<identifier>GnosisMath</identifier>{<contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <constantType>constant</constantType>
            <identifier>ONE</identifier>=<expression>
               <primaryExpression>
                  <numberLiteral>
                     <hexNumber>0x10000000000000000</hexNumber>
                  </numberLiteral>
               </primaryExpression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <constantType>constant</constantType>
            <identifier>LN2</identifier>=<expression>
               <primaryExpression>
                  <numberLiteral>
                     <hexNumber>0xb17217f7d1cf79ac</hexNumber>
                  </numberLiteral>
               </primaryExpression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <constantType>constant</constantType>
            <identifier>LOG2_E</identifier>=<expression>
               <primaryExpression>
                  <numberLiteral>
                     <hexNumber>0x171547652b82fe177</hexNumber>
                  </numberLiteral>
               </primaryExpression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>max</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <typeName>
                        <elementaryTypeName>int</elementaryTypeName>
                     </typeName>[]</typeName>
                  <storageLocation>memory</storageLocation>
                  <identifier>nums</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>int</elementaryTypeName>
                     </typeName>
                     <identifier>maxNum</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>nums</identifier>
                                          </primaryExpression>
                                       </expression>.length</expression>&gt;<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>maxNum</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <plusminusOperator>
                                 <minusOperator>-</minusOperator>
                              </plusminusOperator>
                              <expression>
                                 <primaryExpression>
                                    <numberLiteral>
                                       <decimalNumber>2</decimalNumber>
                                    </numberLiteral>
                                 </primaryExpression>
                              </expression>
                           </expression>
                           <powerOperator>**</powerOperator>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>255</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <forStatement>for(<expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>i</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <primaryExpression>
                              <numberLiteral>
                                 <decimalNumber>0</decimalNumber>
                              </numberLiteral>
                           </primaryExpression>
                        </expression>
                     </expression>;<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>i</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>nums</identifier>
                                 </primaryExpression>
                              </expression>.length</expression>
                        </expression>
                     </condition>;<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>i</identifier>
                           </primaryExpression>
                        </expression>
                        <twoPlusMinusOperator>
                           <incrementOperator>++</incrementOperator>
                        </twoPlusMinusOperator>
                     </expression>)<statement>
                        <ifStatement>if(<condition>
                              <expression>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>nums</identifier>
                                       </primaryExpression>
                                    </expression>[<expression>
                                       <primaryExpression>
                                          <identifier>i</identifier>
                                       </primaryExpression>
                                    </expression>]</expression>&gt;<expression>
                                    <primaryExpression>
                                       <identifier>maxNum</identifier>
                                    </primaryExpression>
                                 </expression>
                              </expression>
                           </condition>)<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>maxNum</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>nums</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>i</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>
                                 </expression>
                              </expressionStatement>;</statement>
                        </ifStatement>
                     </statement>
                  </forStatement>
               </statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>safeToAdd</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>a</identifier>
                              </primaryExpression>
                           </expression>
                           <plusminusOperator>
                              <plusOperator>+</plusOperator>
                           </plusminusOperator>
                           <expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>&gt;=<expression>
                           <primaryExpression>
                              <identifier>a</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>safeToSub</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>a</identifier>
                           </primaryExpression>
                        </expression>&gt;=<expression>
                           <primaryExpression>
                              <identifier>b</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>safeToMul</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>==</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>||<expression>
                           <expression>
                              <expression>
                                 <expression>
                                    <primaryExpression>
                                       <identifier>a</identifier>
                                    </primaryExpression>
                                 </expression>
                                 <muldivOperator>
                                    <mulOperator>*</mulOperator>
                                 </muldivOperator>
                                 <expression>
                                    <primaryExpression>
                                       <identifier>b</identifier>
                                    </primaryExpression>
                                 </expression>
                              </expression>
                              <muldivOperator>
                                 <divOperator>/</divOperator>
                              </muldivOperator>
                              <expression>
                                 <primaryExpression>
                                    <identifier>b</identifier>
                                 </primaryExpression>
                              </expression>
                           </expression>
                           <comparison>==</comparison>
                           <expression>
                              <primaryExpression>
                                 <identifier>a</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>add</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>safeToAdd</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <identifier>a</identifier>
                                                </primaryExpression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <identifier>b</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>a</identifier>
                           </primaryExpression>
                        </expression>
                        <plusminusOperator>
                           <plusOperator>+</plusOperator>
                        </plusminusOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>b</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>sub</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>safeToSub</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <identifier>a</identifier>
                                                </primaryExpression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <identifier>b</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>a</identifier>
                           </primaryExpression>
                        </expression>
                        <plusminusOperator>
                           <minusOperator>-</minusOperator>
                        </plusminusOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>b</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>mul</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>safeToMul</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <identifier>a</identifier>
                                                </primaryExpression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <identifier>b</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>a</identifier>
                           </primaryExpression>
                        </expression>
                        <muldivOperator>
                           <mulOperator>*</mulOperator>
                        </muldivOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>b</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>safeToAdd</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>int</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>int</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <tupleExpression>(<expression>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>b</identifier>
                                       </primaryExpression>
                                    </expression>&gt;=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>&amp;&amp;<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>a</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <plusminusOperator>
                                          <plusOperator>+</plusOperator>
                                       </plusminusOperator>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>b</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>&gt;=<expression>
                                       <primaryExpression>
                                          <identifier>a</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expression>)</tupleExpression>
                        </expression>||<expression>
                           <tupleExpression>(<expression>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>b</identifier>
                                       </primaryExpression>
                                    </expression>&lt;<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>&amp;&amp;<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>a</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <plusminusOperator>
                                          <plusOperator>+</plusOperator>
                                       </plusminusOperator>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>b</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>&lt;<expression>
                                       <primaryExpression>
                                          <identifier>a</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expression>)</tupleExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>safeToSub</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>int</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>int</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <tupleExpression>(<expression>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>b</identifier>
                                       </primaryExpression>
                                    </expression>&gt;=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>&amp;&amp;<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>a</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <plusminusOperator>
                                          <minusOperator>-</minusOperator>
                                       </plusminusOperator>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>b</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>&lt;=<expression>
                                       <primaryExpression>
                                          <identifier>a</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expression>)</tupleExpression>
                        </expression>||<expression>
                           <tupleExpression>(<expression>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>b</identifier>
                                       </primaryExpression>
                                    </expression>&lt;<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>&amp;&amp;<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>a</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <plusminusOperator>
                                          <minusOperator>-</minusOperator>
                                       </plusminusOperator>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>b</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>&gt;<expression>
                                       <primaryExpression>
                                          <identifier>a</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expression>)</tupleExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>safeToMul</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>int</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>int</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <tupleExpression>(<expression>
                                 <expression>
                                    <primaryExpression>
                                       <identifier>b</identifier>
                                    </primaryExpression>
                                 </expression>
                                 <comparison>==</comparison>
                                 <expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>0</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>
                              </expression>)</tupleExpression>
                        </expression>||<expression>
                           <tupleExpression>(<expression>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>a</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <muldivOperator>
                                          <mulOperator>*</mulOperator>
                                       </muldivOperator>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>b</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                    <muldivOperator>
                                       <divOperator>/</divOperator>
                                    </muldivOperator>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>b</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                                 <comparison>==</comparison>
                                 <expression>
                                    <primaryExpression>
                                       <identifier>a</identifier>
                                    </primaryExpression>
                                 </expression>
                              </expression>)</tupleExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>add</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>int</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>int</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>int</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>safeToAdd</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <identifier>a</identifier>
                                                </primaryExpression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <identifier>b</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>a</identifier>
                           </primaryExpression>
                        </expression>
                        <plusminusOperator>
                           <plusOperator>+</plusOperator>
                        </plusminusOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>b</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>sub</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>int</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>int</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>int</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>safeToSub</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <identifier>a</identifier>
                                                </primaryExpression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <identifier>b</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>a</identifier>
                           </primaryExpression>
                        </expression>
                        <plusminusOperator>
                           <minusOperator>-</minusOperator>
                        </plusminusOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>b</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>mul</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>int</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>int</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>int</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>safeToMul</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <identifier>a</identifier>
                                                </primaryExpression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <identifier>b</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>a</identifier>
                           </primaryExpression>
                        </expression>
                        <muldivOperator>
                           <mulOperator>*</mulOperator>
                        </muldivOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>b</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</libraryDefinition>
   <contractDefinition>contract<identifier>StandardTokenData</identifier>{<contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <mappingSt>mapping(<typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>=&gt;<typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>)</mappingSt>
            </typeName>
            <identifier>balances</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <mappingSt>mapping(<typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>=&gt;<typeName>
                     <mappingSt>mapping(<typeName>
                           <elementaryTypeName>address</elementaryTypeName>
                        </typeName>=&gt;<typeName>
                           <elementaryTypeName>uint</elementaryTypeName>
                        </typeName>)</mappingSt>
                  </typeName>)</mappingSt>
            </typeName>
            <identifier>allowances</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <identifier>totalTokens</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>GnosisStandardToken</identifier>is<inheritanceSpecifier>
         <userDefinedTypeName>
            <identifier>Token</identifier>
         </userDefinedTypeName>
      </inheritanceSpecifier>,<inheritanceSpecifier>
         <userDefinedTypeName>
            <identifier>StandardTokenData</identifier>
         </userDefinedTypeName>
      </inheritanceSpecifier>{<contractPartDefinition>
         <usingForDeclaration>using<identifier>GnosisMath</identifier>for*;</usingForDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transfer</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>!<expression>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>balances</identifier>
                                       </primaryExpression>
                                    </expression>[<expression>
                                       <environmentalVariable>msg.sender</environmentalVariable>
                                    </expression>]</expression>.<functionCall>
                                    <functionName>
                                       <identifier>safeToSub</identifier>
                                    </functionName>
                                    <callArguments>
                                       <tupleExpression>(<expression>
                                             <primaryExpression>
                                                <identifier>value</identifier>
                                             </primaryExpression>
                                          </expression>)</tupleExpression>
                                    </callArguments>
                                 </functionCall>
                              </expression>
                           </expression>||<expression>!<expression>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>balances</identifier>
                                       </primaryExpression>
                                    </expression>[<expression>
                                       <primaryExpression>
                                          <identifier>to</identifier>
                                       </primaryExpression>
                                    </expression>]</expression>.<functionCall>
                                    <functionName>
                                       <identifier>safeToAdd</identifier>
                                    </functionName>
                                    <callArguments>
                                       <tupleExpression>(<expression>
                                             <primaryExpression>
                                                <identifier>value</identifier>
                                             </primaryExpression>
                                          </expression>)</tupleExpression>
                                    </callArguments>
                                 </functionCall>
                              </expression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <returnStatement>return<expression>
                                    <primaryExpression>
                                       <booleanLiteral>false</booleanLiteral>
                                    </primaryExpression>
                                 </expression>
                              </returnStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>]</expression>
                        <lvalueOperator>
                           <minusLvalueOperator>-=</minusLvalueOperator>
                        </lvalueOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>value</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>to</identifier>
                              </primaryExpression>
                           </expression>]</expression>
                        <lvalueOperator>
                           <plusLvalueOperator>+=</plusLvalueOperator>
                        </lvalueOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>value</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Transfer</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>to</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>value</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transferFrom</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>from</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <expression>!<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>balances</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>from</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>.<functionCall>
                                       <functionName>
                                          <identifier>safeToSub</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <identifier>value</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expression>||<expression>!<expression>
                                    <expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>allowances</identifier>
                                             </primaryExpression>
                                          </expression>[<expression>
                                             <primaryExpression>
                                                <identifier>from</identifier>
                                             </primaryExpression>
                                          </expression>]</expression>[<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>]</expression>.<functionCall>
                                       <functionName>
                                          <identifier>safeToSub</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <identifier>value</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expression>
                           </expression>||<expression>!<expression>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>balances</identifier>
                                       </primaryExpression>
                                    </expression>[<expression>
                                       <primaryExpression>
                                          <identifier>to</identifier>
                                       </primaryExpression>
                                    </expression>]</expression>.<functionCall>
                                    <functionName>
                                       <identifier>safeToAdd</identifier>
                                    </functionName>
                                    <callArguments>
                                       <tupleExpression>(<expression>
                                             <primaryExpression>
                                                <identifier>value</identifier>
                                             </primaryExpression>
                                          </expression>)</tupleExpression>
                                    </callArguments>
                                 </functionCall>
                              </expression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <returnStatement>return<expression>
                                    <primaryExpression>
                                       <booleanLiteral>false</booleanLiteral>
                                    </primaryExpression>
                                 </expression>
                              </returnStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>from</identifier>
                              </primaryExpression>
                           </expression>]</expression>
                        <lvalueOperator>
                           <minusLvalueOperator>-=</minusLvalueOperator>
                        </lvalueOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>value</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>allowances</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <primaryExpression>
                                    <identifier>from</identifier>
                                 </primaryExpression>
                              </expression>]</expression>[<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>]</expression>
                        <lvalueOperator>
                           <minusLvalueOperator>-=</minusLvalueOperator>
                        </lvalueOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>value</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>to</identifier>
                              </primaryExpression>
                           </expression>]</expression>
                        <lvalueOperator>
                           <plusLvalueOperator>+=</plusLvalueOperator>
                        </lvalueOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>value</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Transfer</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <primaryExpression>
                                 <identifier>from</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>to</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>value</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>approve</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>spender</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>allowances</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <environmentalVariable>msg.sender</environmentalVariable>
                              </expression>]</expression>[<expression>
                              <primaryExpression>
                                 <identifier>spender</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <primaryExpression>
                              <identifier>value</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Approval</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>spender</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>value</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>allowance</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>owner</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>spender</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>allowances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>owner</identifier>
                              </primaryExpression>
                           </expression>]</expression>[<expression>
                           <primaryExpression>
                              <identifier>spender</identifier>
                           </primaryExpression>
                        </expression>]</expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>balanceOf</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>owner</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>balances</identifier>
                           </primaryExpression>
                        </expression>[<expression>
                           <primaryExpression>
                              <identifier>owner</identifier>
                           </primaryExpression>
                        </expression>]</expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>totalSupply</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <identifier>totalTokens</identifier>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</contractDefinition>&lt;EOF&gt;</sourceUnit>