<?xml version="1.0" encoding="UTF-8"?>
<sourceUnit>
   <pragmaDirective>pragma<pragmaSolidity>solidity<version>
            <versionLiteral>0.5.8</versionLiteral>
         </version>
      </pragmaSolidity>;</pragmaDirective>
   <pragmaDirective>pragma<pragmaExperimental>experimental<expression>
            <primaryExpression>
               <identifier>ABIEncoderV2</identifier>
            </primaryExpression>
         </expression>
      </pragmaExperimental>;</pragmaDirective>
   <contractDefinition>contract<identifier>ERC20Basic</identifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>totalSupply</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>balanceOf</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_who</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transfer</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <eventDefinition>event<identifier>Transfer</identifier>
            <indexedParameterList>(<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>from</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>to</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>value</identifier>
               </indexedParameter>)</indexedParameterList>;</eventDefinition>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>ERC20</identifier>is<inheritanceSpecifier>
         <userDefinedTypeName>
            <identifier>ERC20Basic</identifier>
         </userDefinedTypeName>
      </inheritanceSpecifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>allowance</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_owner</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_spender</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transferFrom</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_from</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>approve</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_spender</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <eventDefinition>event<identifier>Approval</identifier>
            <indexedParameterList>(<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>owner</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>spender</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>value</identifier>
               </indexedParameter>)</indexedParameterList>;</eventDefinition>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>EIP20</identifier>is<inheritanceSpecifier>
         <userDefinedTypeName>
            <identifier>ERC20</identifier>
         </userDefinedTypeName>
      </inheritanceSpecifier>{<contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>string</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>name</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint8</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>decimals</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>string</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>symbol</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>WETHInterface</identifier>is<inheritanceSpecifier>
         <userDefinedTypeName>
            <identifier>EIP20</identifier>
         </userDefinedTypeName>
      </inheritanceSpecifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>deposit</identifier>
            <parameterList>()</parameterList>
            <visibleType>external</visibleType>
            <stateMutability>
               <payableType>payable</payableType>
            </stateMutability>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>withdraw</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>wad</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>;</functionDefinition>
      </contractPartDefinition>}</contractDefinition>
   <libraryDefinition>library<identifier>SafeMath</identifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>mul</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>c</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>_a</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>==</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <returnStatement>return<expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>0</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>
                              </returnStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>c</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>_a</identifier>
                              </primaryExpression>
                           </expression>
                           <muldivOperator>
                              <mulOperator>*</mulOperator>
                           </muldivOperator>
                           <expression>
                              <primaryExpression>
                                 <identifier>_b</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>assert</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>c</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <muldivOperator>
                                          <divOperator>/</divOperator>
                                       </muldivOperator>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>_a</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                    <comparison>==</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_b</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <identifier>c</identifier>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>div</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>_a</identifier>
                           </primaryExpression>
                        </expression>
                        <muldivOperator>
                           <divOperator>/</divOperator>
                        </muldivOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>_b</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>divCeil</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>_a</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>==</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <returnStatement>return<expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>0</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>
                              </returnStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <returnStatement>return<expression>
                        <expression>
                           <tupleExpression>(<expression>
                                 <expression>
                                    <tupleExpression>(<expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>_a</identifier>
                                             </primaryExpression>
                                          </expression>
                                          <plusminusOperator>
                                             <minusOperator>-</minusOperator>
                                          </plusminusOperator>
                                          <expression>
                                             <primaryExpression>
                                                <numberLiteral>
                                                   <decimalNumber>1</decimalNumber>
                                                </numberLiteral>
                                             </primaryExpression>
                                          </expression>
                                       </expression>)</tupleExpression>
                                 </expression>
                                 <muldivOperator>
                                    <divOperator>/</divOperator>
                                 </muldivOperator>
                                 <expression>
                                    <primaryExpression>
                                       <identifier>_b</identifier>
                                    </primaryExpression>
                                 </expression>
                              </expression>)</tupleExpression>
                        </expression>
                        <plusminusOperator>
                           <plusOperator>+</plusOperator>
                        </plusminusOperator>
                        <expression>
                           <primaryExpression>
                              <numberLiteral>
                                 <decimalNumber>1</decimalNumber>
                              </numberLiteral>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>sub</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>assert</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_b</identifier>
                                       </primaryExpression>
                                    </expression>&lt;=<expression>
                                       <primaryExpression>
                                          <identifier>_a</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>_a</identifier>
                           </primaryExpression>
                        </expression>
                        <plusminusOperator>
                           <minusOperator>-</minusOperator>
                        </plusminusOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>_b</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>add</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>c</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>c</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>_a</identifier>
                              </primaryExpression>
                           </expression>
                           <plusminusOperator>
                              <plusOperator>+</plusOperator>
                           </plusminusOperator>
                           <expression>
                              <primaryExpression>
                                 <identifier>_b</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>assert</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>c</identifier>
                                       </primaryExpression>
                                    </expression>&gt;=<expression>
                                       <primaryExpression>
                                          <identifier>_a</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <identifier>c</identifier>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</libraryDefinition>
   <contractDefinition>contract<identifier>Ownable</identifier>{<contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>address</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>owner</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <eventDefinition>event<identifier>OwnershipTransferred</identifier>
            <indexedParameterList>(<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>previousOwner</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>newOwner</identifier>
               </indexedParameter>)</indexedParameterList>;</eventDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>constructor<parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>owner</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <environmentalVariable>msg.sender</environmentalVariable>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <modifierDefinition>modifier<identifier>onlyOwner</identifier>
            <parameterList>()</parameterList>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <environmentalVariable>msg.sender</environmentalVariable>
                                    </expression>
                                    <comparison>==</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>owner</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <placeholderStatement>_</placeholderStatement>;</statement>}</block>
         </modifierDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transferOwnership</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_newOwner</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>_transferOwnership</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <primaryExpression>
                                       <identifier>_newOwner</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>_transferOwnership</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_newOwner</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_newOwner</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <comparison>!=</comparison>
                                    <expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>address</elementaryTypeName>
                                          </typeName>(<expression>
                                             <primaryExpression>
                                                <numberLiteral>
                                                   <decimalNumber>0</decimalNumber>
                                                </numberLiteral>
                                             </primaryExpression>
                                          </expression>)</typeConversion>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>OwnershipTransferred</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <primaryExpression>
                                 <identifier>owner</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>_newOwner</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>owner</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_newOwner</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>ReentrancyGuard</identifier>{<contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>internal</visibleType>
            <constantType>constant</constantType>
            <identifier>REENTRANCY_GUARD_FREE</identifier>=<expression>
               <primaryExpression>
                  <numberLiteral>
                     <decimalNumber>1</decimalNumber>
                  </numberLiteral>
               </primaryExpression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>internal</visibleType>
            <constantType>constant</constantType>
            <identifier>REENTRANCY_GUARD_LOCKED</identifier>=<expression>
               <primaryExpression>
                  <numberLiteral>
                     <decimalNumber>2</decimalNumber>
                  </numberLiteral>
               </primaryExpression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>internal</visibleType>
            <identifier>reentrancyLock</identifier>=<expression>
               <primaryExpression>
                  <identifier>REENTRANCY_GUARD_FREE</identifier>
               </primaryExpression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <modifierDefinition>modifier<identifier>nonReentrant</identifier>
            <parameterList>()</parameterList>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>reentrancyLock</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <comparison>==</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>REENTRANCY_GUARD_FREE</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>nonReentrant</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>reentrancyLock</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>REENTRANCY_GUARD_LOCKED</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <placeholderStatement>_</placeholderStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>reentrancyLock</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>REENTRANCY_GUARD_FREE</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </modifierDefinition>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>LoanTokenizationV2</identifier>is<inheritanceSpecifier>
         <userDefinedTypeName>
            <identifier>ReentrancyGuard</identifier>
         </userDefinedTypeName>
      </inheritanceSpecifier>,<inheritanceSpecifier>
         <userDefinedTypeName>
            <identifier>Ownable</identifier>
         </userDefinedTypeName>
      </inheritanceSpecifier>{<contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>internal</visibleType>
            <constantType>constant</constantType>
            <identifier>MAX_UINT</identifier>=<expression>
               <expression>
                  <expression>
                     <primaryExpression>
                        <numberLiteral>
                           <decimalNumber>2</decimalNumber>
                        </numberLiteral>
                     </primaryExpression>
                  </expression>
                  <powerOperator>**</powerOperator>
                  <expression>
                     <primaryExpression>
                        <numberLiteral>
                           <decimalNumber>256</decimalNumber>
                        </numberLiteral>
                     </primaryExpression>
                  </expression>
               </expression>
               <plusminusOperator>
                  <minusOperator>-</minusOperator>
               </plusminusOperator>
               <expression>
                  <primaryExpression>
                     <numberLiteral>
                        <decimalNumber>1</decimalNumber>
                     </numberLiteral>
                  </primaryExpression>
               </expression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>string</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>name</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>string</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>symbol</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint8</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>decimals</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>address</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>bZxContract</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>address</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>bZxVault</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>address</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>bZxOracle</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>address</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>wethContract</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>address</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>loanTokenAddress</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>bool</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>mintingPaused</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>bool</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>burningPaused</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <mappingSt>mapping(<typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>=&gt;<typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>)</mappingSt>
            </typeName>
            <visibleType>internal</visibleType>
            <identifier>checkpointPrices_</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>pauseMinting</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>bool</elementaryTypeName>
                  </typeName>
                  <identifier>_isPaused</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>mintingPaused</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_isPaused</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>pauseBurning</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>bool</elementaryTypeName>
                  </typeName>
                  <identifier>_isPaused</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>burningPaused</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_isPaused</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>PositionTokenStorageV2</identifier>is<inheritanceSpecifier>
         <userDefinedTypeName>
            <identifier>LoanTokenizationV2</identifier>
         </userDefinedTypeName>
      </inheritanceSpecifier>{<contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>bool</elementaryTypeName>
            </typeName>
            <visibleType>internal</visibleType>
            <identifier>isInitialized_</identifier>=<expression>
               <primaryExpression>
                  <booleanLiteral>false</booleanLiteral>
               </primaryExpression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>address</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>loanTokenLender</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>address</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>tradeTokenAddress</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>leverageAmount</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>bytes32</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>loanOrderHash</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>loanTokenDecimals</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>loanTokenAdjustment</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>tradeTokenDecimals</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>tradeTokenAdjustment</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>initialPrice</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>bool</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>shortPosition</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <mappingSt>mapping(<typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>=&gt;<typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>)</mappingSt>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>userSurplus</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <mappingSt>mapping(<typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>=&gt;<typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>)</mappingSt>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>userDeficit</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>totalSurplus</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>totalDeficit</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>SplittableTokenStorageV2</identifier>is<inheritanceSpecifier>
         <userDefinedTypeName>
            <identifier>PositionTokenStorageV2</identifier>
         </userDefinedTypeName>
      </inheritanceSpecifier>{<contractPartDefinition>
         <usingForDeclaration>using<identifier>SafeMath</identifier>for<typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>;</usingForDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <eventDefinition>event<identifier>Transfer</identifier>
            <indexedParameterList>(<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>from</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>to</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>value</identifier>
               </indexedParameter>)</indexedParameterList>;</eventDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <eventDefinition>event<identifier>Approval</identifier>
            <indexedParameterList>(<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>owner</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>spender</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>value</identifier>
               </indexedParameter>)</indexedParameterList>;</eventDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <eventDefinition>event<identifier>Mint</identifier>
            <indexedParameterList>(<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>minter</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>depositAddress</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>depositAmount</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>tokenAmount</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>price</identifier>
               </indexedParameter>)</indexedParameterList>;</eventDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <eventDefinition>event<identifier>Burn</identifier>
            <indexedParameterList>(<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>burner</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>withdrawalAddress</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>withdrawalAmount</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>tokenAmount</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>price</identifier>
               </indexedParameter>)</indexedParameterList>;</eventDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <mappingSt>mapping(<typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>=&gt;<typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>)</mappingSt>
            </typeName>
            <visibleType>internal</visibleType>
            <identifier>balances</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <mappingSt>mapping(<typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>=&gt;<typeName>
                     <mappingSt>mapping(<typeName>
                           <elementaryTypeName>address</elementaryTypeName>
                        </typeName>=&gt;<typeName>
                           <elementaryTypeName>uint256</elementaryTypeName>
                        </typeName>)</mappingSt>
                  </typeName>)</mappingSt>
            </typeName>
            <visibleType>internal</visibleType>
            <identifier>allowed</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>internal</visibleType>
            <identifier>totalSupply_</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>splitFactor</identifier>=<expression>
               <expression>
                  <primaryExpression>
                     <numberLiteral>
                        <decimalNumber>10</decimalNumber>
                     </numberLiteral>
                  </primaryExpression>
               </expression>
               <powerOperator>**</powerOperator>
               <expression>
                  <primaryExpression>
                     <numberLiteral>
                        <decimalNumber>18</decimalNumber>
                     </numberLiteral>
                  </primaryExpression>
               </expression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>totalSupply</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <functionCall>
                           <functionName>
                              <identifier>denormalize</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <primaryExpression>
                                       <identifier>totalSupply_</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>balanceOf</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_owner</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <functionCall>
                           <functionName>
                              <identifier>denormalize</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>balances</identifier>
                                       </primaryExpression>
                                    </expression>[<expression>
                                       <primaryExpression>
                                          <identifier>_owner</identifier>
                                       </primaryExpression>
                                    </expression>]</expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>allowance</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_owner</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_spender</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <functionCall>
                           <functionName>
                              <identifier>denormalize</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>allowed</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_owner</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>[<expression>
                                       <primaryExpression>
                                          <identifier>_spender</identifier>
                                       </primaryExpression>
                                    </expression>]</expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>normalize</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>_value</identifier>
                              </primaryExpression>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>mul</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>splitFactor</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>.<functionCall>
                           <functionName>
                              <identifier>div</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>10</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                    <powerOperator>**</powerOperator>
                                    <expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>18</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>denormalize</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>_value</identifier>
                              </primaryExpression>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>mul</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>10</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                       <powerOperator>**</powerOperator>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>18</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>.<functionCall>
                           <functionName>
                              <identifier>div</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <primaryExpression>
                                       <identifier>splitFactor</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>SplittableTokenV2</identifier>is<inheritanceSpecifier>
         <userDefinedTypeName>
            <identifier>SplittableTokenStorageV2</identifier>
         </userDefinedTypeName>
      </inheritanceSpecifier>{<contractPartDefinition>
         <usingForDeclaration>using<identifier>SafeMath</identifier>for<typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>;</usingForDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transferFrom</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_from</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>allowanceAmount</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>denormalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>allowed</identifier>
                                             </primaryExpression>
                                          </expression>[<expression>
                                             <primaryExpression>
                                                <identifier>_from</identifier>
                                             </primaryExpression>
                                          </expression>]</expression>[<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>]</expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>fromBalance</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>denormalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>balances</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_from</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_value</identifier>
                                       </primaryExpression>
                                    </expression>&lt;=<expression>
                                       <primaryExpression>
                                          <identifier>fromBalance</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>insufficient balance</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_value</identifier>
                                       </primaryExpression>
                                    </expression>&lt;=<expression>
                                       <primaryExpression>
                                          <identifier>allowanceAmount</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>insufficient allowance</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_to</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <comparison>!=</comparison>
                                    <expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>address</elementaryTypeName>
                                          </typeName>(<expression>
                                             <primaryExpression>
                                                <numberLiteral>
                                                   <decimalNumber>0</decimalNumber>
                                                </numberLiteral>
                                             </primaryExpression>
                                          </expression>)</typeConversion>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>invalid address</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>_from</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>normalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>fromBalance</identifier>
                                          </primaryExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>sub</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>_value</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>balanceOf</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>_from</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                           <comparison>==</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>balances</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_from</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>_to</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>normalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>denormalize</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>balances</identifier>
                                                         </primaryExpression>
                                                      </expression>[<expression>
                                                         <primaryExpression>
                                                            <identifier>_to</identifier>
                                                         </primaryExpression>
                                                      </expression>]</expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>add</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>_value</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>allowanceAmount</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>MAX_UINT</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>allowed</identifier>
                                             </primaryExpression>
                                          </expression>[<expression>
                                             <primaryExpression>
                                                <identifier>_from</identifier>
                                             </primaryExpression>
                                          </expression>]</expression>[<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>]</expression>=<expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>normalize</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>allowanceAmount</identifier>
                                                      </primaryExpression>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>sub</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>_value</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>allowance</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>_from</identifier>
                                                      </primaryExpression>
                                                   </expression>,<expression>
                                                      <environmentalVariable>msg.sender</environmentalVariable>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>
                                       <comparison>==</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>allowed</identifier>
                                                         </primaryExpression>
                                                      </expression>[<expression>
                                                         <primaryExpression>
                                                            <identifier>_from</identifier>
                                                         </primaryExpression>
                                                      </expression>]</expression>[<expression>
                                                      <environmentalVariable>msg.sender</environmentalVariable>
                                                   </expression>]</expression>=<expression>
                                                   <primaryExpression>
                                                      <numberLiteral>
                                                         <decimalNumber>0</decimalNumber>
                                                      </numberLiteral>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <emitEventStatement>emit<identifier>Transfer</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <primaryExpression>
                                 <identifier>_from</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>_to</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>_value</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transfer</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>fromBalance</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>denormalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>balances</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>]</expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_value</identifier>
                                       </primaryExpression>
                                    </expression>&lt;=<expression>
                                       <primaryExpression>
                                          <identifier>fromBalance</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>insufficient balance</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_to</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <comparison>!=</comparison>
                                    <expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>address</elementaryTypeName>
                                          </typeName>(<expression>
                                             <primaryExpression>
                                                <numberLiteral>
                                                   <decimalNumber>0</decimalNumber>
                                                </numberLiteral>
                                             </primaryExpression>
                                          </expression>)</typeConversion>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>invalid address</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>]</expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>normalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>fromBalance</identifier>
                                          </primaryExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>sub</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>_value</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>balanceOf</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                           <comparison>==</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>balances</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>_to</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>normalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>denormalize</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>balances</identifier>
                                                         </primaryExpression>
                                                      </expression>[<expression>
                                                         <primaryExpression>
                                                            <identifier>_to</identifier>
                                                         </primaryExpression>
                                                      </expression>]</expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>add</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>_value</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Transfer</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>_to</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>_value</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>approve</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_spender</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>allowed</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <environmentalVariable>msg.sender</environmentalVariable>
                              </expression>]</expression>[<expression>
                              <primaryExpression>
                                 <identifier>_spender</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <primaryExpression>
                              <identifier>_value</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>allowance</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>,<expression>
                                          <primaryExpression>
                                             <identifier>_spender</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                           <comparison>==</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>allowed</identifier>
                                             </primaryExpression>
                                          </expression>[<expression>
                                             <environmentalVariable>msg.sender</environmentalVariable>
                                          </expression>]</expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_spender</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <emitEventStatement>emit<identifier>Approval</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>_spender</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>_value</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>increaseApproval</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_spender</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_addedValue</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>allowed</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <environmentalVariable>msg.sender</environmentalVariable>
                              </expression>]</expression>[<expression>
                              <primaryExpression>
                                 <identifier>_spender</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>normalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>denormalize</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <expression>
                                                         <expression>
                                                            <primaryExpression>
                                                               <identifier>allowed</identifier>
                                                            </primaryExpression>
                                                         </expression>[<expression>
                                                            <environmentalVariable>msg.sender</environmentalVariable>
                                                         </expression>]</expression>[<expression>
                                                         <primaryExpression>
                                                            <identifier>_spender</identifier>
                                                         </primaryExpression>
                                                      </expression>]</expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>add</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>_addedValue</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Approval</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>_spender</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>denormalize</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <expression>
                                             <expression>
                                                <primaryExpression>
                                                   <identifier>allowed</identifier>
                                                </primaryExpression>
                                             </expression>[<expression>
                                                <environmentalVariable>msg.sender</environmentalVariable>
                                             </expression>]</expression>[<expression>
                                             <primaryExpression>
                                                <identifier>_spender</identifier>
                                             </primaryExpression>
                                          </expression>]</expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>decreaseApproval</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_spender</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_subtractedValue</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>oldValue</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>denormalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>allowed</identifier>
                                             </primaryExpression>
                                          </expression>[<expression>
                                             <environmentalVariable>msg.sender</environmentalVariable>
                                          </expression>]</expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_spender</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>_subtractedValue</identifier>
                              </primaryExpression>
                           </expression>&gt;=<expression>
                              <primaryExpression>
                                 <identifier>oldValue</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>allowed</identifier>
                                             </primaryExpression>
                                          </expression>[<expression>
                                             <environmentalVariable>msg.sender</environmentalVariable>
                                          </expression>]</expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_spender</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>allowed</identifier>
                                             </primaryExpression>
                                          </expression>[<expression>
                                             <environmentalVariable>msg.sender</environmentalVariable>
                                          </expression>]</expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_spender</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>=<expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>normalize</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>oldValue</identifier>
                                                      </primaryExpression>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>sub</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>_subtractedValue</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>allowance</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <environmentalVariable>msg.sender</environmentalVariable>
                                                   </expression>,<expression>
                                                      <primaryExpression>
                                                         <identifier>_spender</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>
                                       <comparison>==</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>allowed</identifier>
                                                         </primaryExpression>
                                                      </expression>[<expression>
                                                         <environmentalVariable>msg.sender</environmentalVariable>
                                                      </expression>]</expression>[<expression>
                                                      <primaryExpression>
                                                         <identifier>_spender</identifier>
                                                      </primaryExpression>
                                                   </expression>]</expression>=<expression>
                                                   <primaryExpression>
                                                      <numberLiteral>
                                                         <decimalNumber>0</decimalNumber>
                                                      </numberLiteral>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <emitEventStatement>emit<identifier>Approval</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>_spender</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>denormalize</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <expression>
                                             <expression>
                                                <primaryExpression>
                                                   <identifier>allowed</identifier>
                                                </primaryExpression>
                                             </expression>[<expression>
                                                <environmentalVariable>msg.sender</environmentalVariable>
                                             </expression>]</expression>[<expression>
                                             <primaryExpression>
                                                <identifier>_spender</identifier>
                                             </primaryExpression>
                                          </expression>]</expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>_mint</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_tokenAmount</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_to</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <comparison>!=</comparison>
                                    <expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>address</elementaryTypeName>
                                          </typeName>(<expression>
                                             <primaryExpression>
                                                <numberLiteral>
                                                   <decimalNumber>0</decimalNumber>
                                                </numberLiteral>
                                             </primaryExpression>
                                          </expression>)</typeConversion>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>invalid address</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>totalSupply_</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>normalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>denormalize</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>totalSupply_</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>add</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>_tokenAmount</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>_to</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>normalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>denormalize</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>balances</identifier>
                                                         </primaryExpression>
                                                      </expression>[<expression>
                                                         <primaryExpression>
                                                            <identifier>_to</identifier>
                                                         </primaryExpression>
                                                      </expression>]</expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>add</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>_tokenAmount</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Transfer</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <typeConversion>
                                 <typeName>
                                    <elementaryTypeName>address</elementaryTypeName>
                                 </typeName>(<expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>0</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>)</typeConversion>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>_to</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>_tokenAmount</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>_burn</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_who</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_tokenAmount</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>whoBalance</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>denormalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>balances</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_who</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_tokenAmount</identifier>
                                       </primaryExpression>
                                    </expression>&lt;=<expression>
                                       <primaryExpression>
                                          <identifier>whoBalance</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>burn value exceeds balance</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>offsetAmount</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>_who</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>normalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>whoBalance</identifier>
                                          </primaryExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>sub</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>_tokenAmount</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <expression>
                                 <expression>
                                    <primaryExpression>
                                       <identifier>balances</identifier>
                                    </primaryExpression>
                                 </expression>[<expression>
                                    <primaryExpression>
                                       <identifier>_who</identifier>
                                    </primaryExpression>
                                 </expression>]</expression>&lt;=<expression>
                                 <primaryExpression>
                                    <numberLiteral>
                                       <decimalNumber>10</decimalNumber>
                                    </numberLiteral>
                                 </primaryExpression>
                              </expression>
                           </expression>||<expression>
                              <expression>
                                 <functionCall>
                                    <functionName>
                                       <identifier>balanceOf</identifier>
                                    </functionName>
                                    <callArguments>
                                       <tupleExpression>(<expression>
                                             <primaryExpression>
                                                <identifier>_who</identifier>
                                             </primaryExpression>
                                          </expression>)</tupleExpression>
                                    </callArguments>
                                 </functionCall>
                              </expression>&lt;=<expression>
                                 <primaryExpression>
                                    <numberLiteral>
                                       <decimalNumber>10</decimalNumber>
                                    </numberLiteral>
                                 </primaryExpression>
                              </expression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>offsetAmount</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>balances</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_who</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>balances</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_who</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>normSupply</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>denormalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>totalSupply_</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>normSupply</identifier>
                              </primaryExpression>
                           </expression>&gt;<expression>
                              <primaryExpression>
                                 <identifier>_tokenAmount</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>totalSupply_</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>normalize</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>normSupply</identifier>
                                                      </primaryExpression>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>sub</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>_tokenAmount</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>totalSupply</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>()</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>
                                       <comparison>==</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>totalSupply_</identifier>
                                                   </primaryExpression>
                                                </expression>=<expression>
                                                   <primaryExpression>
                                                      <numberLiteral>
                                                         <decimalNumber>0</decimalNumber>
                                                      </numberLiteral>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>balances</identifier>
                                                      </primaryExpression>
                                                   </expression>[<expression>
                                                      <primaryExpression>
                                                         <identifier>_who</identifier>
                                                      </primaryExpression>
                                                   </expression>]</expression>=<expression>
                                                   <primaryExpression>
                                                      <numberLiteral>
                                                         <decimalNumber>0</decimalNumber>
                                                      </numberLiteral>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>balances</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_who</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>totalSupply_</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>offsetAmount</identifier>
                              </primaryExpression>
                           </expression>&gt;<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_tokenAmount</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>_tokenAmount</identifier>
                                          </primaryExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>add</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <functionCall>
                                                      <functionName>
                                                         <identifier>denormalize</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>offsetAmount</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>totalSupply_</identifier>
                                          </primaryExpression>
                                       </expression>&gt;<expression>
                                          <primaryExpression>
                                             <identifier>offsetAmount</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <expressionStatement>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>totalSupply_</identifier>
                                             </primaryExpression>
                                          </expression>=<expression>
                                             <expression>
                                                <primaryExpression>
                                                   <identifier>totalSupply_</identifier>
                                                </primaryExpression>
                                             </expression>.<functionCall>
                                                <functionName>
                                                   <identifier>sub</identifier>
                                                </functionName>
                                                <callArguments>
                                                   <tupleExpression>(<expression>
                                                         <primaryExpression>
                                                            <identifier>offsetAmount</identifier>
                                                         </primaryExpression>
                                                      </expression>)</tupleExpression>
                                                </callArguments>
                                             </functionCall>
                                          </expression>
                                       </expression>
                                    </expressionStatement>;</statement>else<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>totalSupply_</identifier>
                                                   </primaryExpression>
                                                </expression>=<expression>
                                                   <primaryExpression>
                                                      <numberLiteral>
                                                         <decimalNumber>0</decimalNumber>
                                                      </numberLiteral>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <emitEventStatement>emit<identifier>Transfer</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <primaryExpression>
                                 <identifier>_who</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <typeConversion>
                                 <typeName>
                                    <elementaryTypeName>address</elementaryTypeName>
                                 </typeName>(<expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>0</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>)</typeConversion>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>_tokenAmount</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</contractDefinition>
   <interfaceDefinition>interface<identifier>IBZx</identifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>closeLoanPartiallyFromCollateral</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>
                  <identifier>loanOrderHash</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>closeAmount</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>actualCloseAmount</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>withdrawCollateral</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>
                  <identifier>loanOrderHash</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>withdrawAmount</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>amountWithdrawn</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>depositCollateral</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>
                  <identifier>loanOrderHash</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>depositTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>depositAmount</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>getMarginLevels</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>
                  <identifier>loanOrderHash</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>trader</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>initialMarginAmount</identifier>
                  </parameter>,<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>maintenanceMarginAmount</identifier>
                  </parameter>,<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>currentMarginAmount</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>getTotalEscrow</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>
                  <identifier>loanOrderHash</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>trader</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>netCollateralAmount</identifier>
                  </parameter>,<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>interestDepositRemaining</identifier>
                  </parameter>,<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>loanTokenAmountBorrowed</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>oracleAddresses</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>oracleAddress</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>address</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>}</interfaceDefinition>
   <interfaceDefinition>interface<identifier>IBZxOracle</identifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>tradeUserAsset</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>sourceTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>destTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>receiverAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>returnToSenderAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>sourceTokenAmount</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>maxDestTokenAmount</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>minConversionRate</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>destTokenAmountReceived</identifier>
                  </parameter>,<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>sourceTokenAmountUsed</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>getTradeData</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>sourceTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>destTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>sourceTokenAmount</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>sourceToDestRate</identifier>
                  </parameter>,<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>sourceToDestPrecision</identifier>
                  </parameter>,<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>destTokenAmount</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>}</interfaceDefinition>
   <contractDefinition>contract<identifier>ILoanToken</identifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>getMaxEscrowAmount</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>leverageAmount</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>marginTradeFromDeposit</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>depositAmount</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>leverageAmount</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>loanTokenSent</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>collateralTokenSent</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>tradeTokenSent</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>trader</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>depositTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>collateralTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>tradeTokenAddress</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bytes32</elementaryTypeName>
                     </typeName>
                     <identifier>loanOrderHash</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>PositionTokenLogicV2</identifier>is<inheritanceSpecifier>
         <userDefinedTypeName>
            <identifier>SplittableTokenV2</identifier>
         </userDefinedTypeName>
      </inheritanceSpecifier>{<contractPartDefinition>
         <usingForDeclaration>using<identifier>SafeMath</identifier>for<typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>;</usingForDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionFallBackDefinition>function<parameterList>()</parameterList>
            <visibleType>external</visibleType>
            <stateMutability>
               <payableType>payable</payableType>
            </stateMutability>
            <block>{}</block>
         </functionFallBackDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>mintWithEther</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>receiver</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>maxPriceAllowed</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <stateMutability>
               <payableType>payable</payableType>
            </stateMutability>
            <identifier>nonReentrant</identifier>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>!<expression>
                                       <primaryExpression>
                                          <identifier>mintingPaused</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>paused</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <environmentalVariable>msg.value</environmentalVariable>
                                    </expression>
                                    <comparison>!=</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>msg.value == 0</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>netCollateralAmount</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>interestDepositRemaining</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>totalSupply</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>()</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <tupleExpression>(<expression>
                                             <primaryExpression>
                                                <identifier>netCollateralAmount</identifier>
                                             </primaryExpression>
                                          </expression>,<expression>
                                             <primaryExpression>
                                                <identifier>interestDepositRemaining</identifier>
                                             </primaryExpression>
                                          </expression>,)</tupleExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>IBZx</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>bZxContract</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>getTotalEscrow</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>loanOrderHash</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <typeConversion>
                                                      <typeName>
                                                         <elementaryTypeName>address</elementaryTypeName>
                                                      </typeName>(<expression>
                                                         <environmentalVariable>this</environmentalVariable>
                                                      </expression>)</typeConversion>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>currentPrice</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>_tokenPrice</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>netCollateralAmount</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>interestDepositRemaining</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>maxPriceAllowed</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>require</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>currentPrice</identifier>
                                                   </primaryExpression>
                                                </expression>&lt;=<expression>
                                                   <primaryExpression>
                                                      <identifier>maxPriceAllowed</identifier>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <stringLiteral>price too high</stringLiteral>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <functionCall>
                              <functionName>
                                 <identifier>WETHInterface</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>wethContract</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>.<functionCall>
                           <functionName>
                              <identifier>deposit</identifier>
                           </functionName>
                           <value>.value(<expression>
                                 <environmentalVariable>msg.value</environmentalVariable>
                              </expression>)</value>
                           <callArguments>
                              <tupleExpression>()</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <functionCall>
                           <functionName>
                              <identifier>_mintWithToken</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <primaryExpression>
                                       <identifier>receiver</identifier>
                                    </primaryExpression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>wethContract</identifier>
                                    </primaryExpression>
                                 </expression>,<expression>
                                    <environmentalVariable>msg.value</environmentalVariable>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>currentPrice</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>mintWithToken</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>receiver</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>depositTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>depositAmount</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>maxPriceAllowed</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <identifier>nonReentrant</identifier>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>!<expression>
                                       <primaryExpression>
                                          <identifier>mintingPaused</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>paused</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>depositAmount</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <comparison>!=</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>depositAmount == 0</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>netCollateralAmount</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>interestDepositRemaining</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>totalSupply</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>()</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <tupleExpression>(<expression>
                                             <primaryExpression>
                                                <identifier>netCollateralAmount</identifier>
                                             </primaryExpression>
                                          </expression>,<expression>
                                             <primaryExpression>
                                                <identifier>interestDepositRemaining</identifier>
                                             </primaryExpression>
                                          </expression>,)</tupleExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>IBZx</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>bZxContract</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>getTotalEscrow</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>loanOrderHash</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <typeConversion>
                                                      <typeName>
                                                         <elementaryTypeName>address</elementaryTypeName>
                                                      </typeName>(<expression>
                                                         <environmentalVariable>this</environmentalVariable>
                                                      </expression>)</typeConversion>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>currentPrice</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>_tokenPrice</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>netCollateralAmount</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>interestDepositRemaining</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>maxPriceAllowed</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>require</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>currentPrice</identifier>
                                                   </primaryExpression>
                                                </expression>&lt;=<expression>
                                                   <primaryExpression>
                                                      <identifier>maxPriceAllowed</identifier>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <stringLiteral>price too high</stringLiteral>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>ERC20</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>depositTokenAddress</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>.<functionCall>
                                       <functionName>
                                          <identifier>transferFrom</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <environmentalVariable>msg.sender</environmentalVariable>
                                             </expression>,<expression>
                                                <typeConversion>
                                                   <typeName>
                                                      <elementaryTypeName>address</elementaryTypeName>
                                                   </typeName>(<expression>
                                                      <environmentalVariable>this</environmentalVariable>
                                                   </expression>)</typeConversion>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <identifier>depositAmount</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>transfer of token failed</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <functionCall>
                           <functionName>
                              <identifier>_mintWithToken</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <primaryExpression>
                                       <identifier>receiver</identifier>
                                    </primaryExpression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>depositTokenAddress</identifier>
                                    </primaryExpression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>depositAmount</identifier>
                                    </primaryExpression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>currentPrice</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>burnToEther</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address payable</elementaryTypeName>
                  </typeName>
                  <identifier>receiver</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>burnAmount</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>minPriceAllowed</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <identifier>nonReentrant</identifier>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>!<expression>
                                       <primaryExpression>
                                          <identifier>burningPaused</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>paused</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <tupleExpression>(<expression>
                                 <variableDeclaration>
                                    <typeName>
                                       <elementaryTypeName>uint256</elementaryTypeName>
                                    </typeName>
                                    <identifier>tradeTokenAmountOwed</identifier>
                                 </variableDeclaration>
                              </expression>,<expression>
                                 <variableDeclaration>
                                    <typeName>
                                       <elementaryTypeName>uint256</elementaryTypeName>
                                    </typeName>
                                    <identifier>currentPrice</identifier>
                                 </variableDeclaration>
                              </expression>)</tupleExpression>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>_burnToken</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>burnAmount</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>minPriceAllowed</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>tradeTokenAmountOwed</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>wethContract</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>!=</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>tradeTokenAddress</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <tupleExpression>(<expression>
                                                         <variableDeclaration>
                                                            <typeName>
                                                               <elementaryTypeName>uint256</elementaryTypeName>
                                                            </typeName>
                                                            <identifier>destTokenAmountReceived</identifier>
                                                         </variableDeclaration>
                                                      </expression>,)</tupleExpression>
                                                </expression>=<expression>
                                                   <functionCall>
                                                      <functionName>
                                                         <identifier>_tradeUserAsset</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>tradeTokenAddress</identifier>
                                                               </primaryExpression>
                                                            </expression>,<expression>
                                                               <typeConversion>
                                                                  <typeName>
                                                                     <elementaryTypeName>address</elementaryTypeName>
                                                                  </typeName>(<expression>
                                                                     <primaryExpression>
                                                                        <numberLiteral>
                                                                           <decimalNumber>0</decimalNumber>
                                                                        </numberLiteral>
                                                                     </primaryExpression>
                                                                  </expression>)</typeConversion>
                                                            </expression>,<expression>
                                                               <primaryExpression>
                                                                  <identifier>receiver</identifier>
                                                               </primaryExpression>
                                                            </expression>,<expression>
                                                               <primaryExpression>
                                                                  <identifier>tradeTokenAmountOwed</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>tradeTokenAmountOwed</identifier>
                                                   </primaryExpression>
                                                </expression>=<expression>
                                                   <primaryExpression>
                                                      <identifier>destTokenAmountReceived</identifier>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>else<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <functionCall>
                                                      <functionName>
                                                         <identifier>WETHInterface</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>wethContract</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>.<functionCall>
                                                   <functionName>
                                                      <identifier>withdraw</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <primaryExpression>
                                                               <identifier>tradeTokenAmountOwed</identifier>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <expressionStatement>
                                             <expression>
                                                <functionCall>
                                                   <functionName>
                                                      <identifier>require</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <expression>
                                                               <primaryExpression>
                                                                  <identifier>receiver</identifier>
                                                               </primaryExpression>
                                                            </expression>.<functionCall>
                                                               <functionName>
                                                                  <identifier>send</identifier>
                                                               </functionName>
                                                               <callArguments>
                                                                  <tupleExpression>(<expression>
                                                                        <primaryExpression>
                                                                           <identifier>tradeTokenAmountOwed</identifier>
                                                                        </primaryExpression>
                                                                     </expression>)</tupleExpression>
                                                               </callArguments>
                                                            </functionCall>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <stringLiteral>transfer of ETH failed</stringLiteral>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <emitEventStatement>emit<identifier>Burn</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <primaryExpression>
                                 <identifier>receiver</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <typeConversion>
                                 <typeName>
                                    <elementaryTypeName>address</elementaryTypeName>
                                 </typeName>(<expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>0</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>)</typeConversion>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>tradeTokenAmountOwed</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>burnAmount</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>currentPrice</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <identifier>tradeTokenAmountOwed</identifier>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>burnToToken</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>receiver</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>burnTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>burnAmount</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>minPriceAllowed</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <identifier>nonReentrant</identifier>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>!<expression>
                                       <primaryExpression>
                                          <identifier>burningPaused</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>paused</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <tupleExpression>(<expression>
                                 <variableDeclaration>
                                    <typeName>
                                       <elementaryTypeName>uint256</elementaryTypeName>
                                    </typeName>
                                    <identifier>tradeTokenAmountOwed</identifier>
                                 </variableDeclaration>
                              </expression>,<expression>
                                 <variableDeclaration>
                                    <typeName>
                                       <elementaryTypeName>uint256</elementaryTypeName>
                                    </typeName>
                                    <identifier>currentPrice</identifier>
                                 </variableDeclaration>
                              </expression>)</tupleExpression>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>_burnToken</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>burnAmount</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>minPriceAllowed</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>tradeTokenAmountOwed</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>burnTokenAddress</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>!=</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>tradeTokenAddress</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <tupleExpression>(<expression>
                                                         <variableDeclaration>
                                                            <typeName>
                                                               <elementaryTypeName>uint256</elementaryTypeName>
                                                            </typeName>
                                                            <identifier>destTokenAmountReceived</identifier>
                                                         </variableDeclaration>
                                                      </expression>,)</tupleExpression>
                                                </expression>=<expression>
                                                   <functionCall>
                                                      <functionName>
                                                         <identifier>_tradeUserAsset</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>tradeTokenAddress</identifier>
                                                               </primaryExpression>
                                                            </expression>,<expression>
                                                               <primaryExpression>
                                                                  <identifier>burnTokenAddress</identifier>
                                                               </primaryExpression>
                                                            </expression>,<expression>
                                                               <primaryExpression>
                                                                  <identifier>receiver</identifier>
                                                               </primaryExpression>
                                                            </expression>,<expression>
                                                               <primaryExpression>
                                                                  <identifier>tradeTokenAmountOwed</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>tradeTokenAmountOwed</identifier>
                                                   </primaryExpression>
                                                </expression>=<expression>
                                                   <primaryExpression>
                                                      <identifier>destTokenAmountReceived</identifier>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>else<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <functionCall>
                                                   <functionName>
                                                      <identifier>require</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <expression>
                                                               <functionCall>
                                                                  <functionName>
                                                                     <identifier>ERC20</identifier>
                                                                  </functionName>
                                                                  <callArguments>
                                                                     <tupleExpression>(<expression>
                                                                           <primaryExpression>
                                                                              <identifier>tradeTokenAddress</identifier>
                                                                           </primaryExpression>
                                                                        </expression>)</tupleExpression>
                                                                  </callArguments>
                                                               </functionCall>
                                                            </expression>.<functionCall>
                                                               <functionName>
                                                                  <identifier>transfer</identifier>
                                                               </functionName>
                                                               <callArguments>
                                                                  <tupleExpression>(<expression>
                                                                        <primaryExpression>
                                                                           <identifier>receiver</identifier>
                                                                        </primaryExpression>
                                                                     </expression>,<expression>
                                                                        <primaryExpression>
                                                                           <identifier>tradeTokenAmountOwed</identifier>
                                                                        </primaryExpression>
                                                                     </expression>)</tupleExpression>
                                                               </callArguments>
                                                            </functionCall>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <stringLiteral>transfer of loanToken failed</stringLiteral>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <emitEventStatement>emit<identifier>Burn</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <primaryExpression>
                                 <identifier>receiver</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>burnTokenAddress</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>tradeTokenAmountOwed</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>burnAmount</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>currentPrice</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <identifier>tradeTokenAmountOwed</identifier>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>donateAsset</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>tokenAddress</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <identifier>nonReentrant</identifier>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>tokenAddress</identifier>
                                 </primaryExpression>
                              </expression>
                              <comparison>==</comparison>
                              <expression>
                                 <primaryExpression>
                                    <identifier>tradeTokenAddress</identifier>
                                 </primaryExpression>
                              </expression>
                           </expression>||<expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>tokenAddress</identifier>
                                 </primaryExpression>
                              </expression>
                              <comparison>==</comparison>
                              <expression>
                                 <primaryExpression>
                                    <identifier>loanTokenAddress</identifier>
                                 </primaryExpression>
                              </expression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <returnStatement>return<expression>
                              <primaryExpression>
                                 <booleanLiteral>false</booleanLiteral>
                              </primaryExpression>
                           </expression>
                        </returnStatement>;</statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>balance</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>address</elementaryTypeName>
                           </typeName>
                           <identifier>token</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>tokenAddress</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>==</comparison>
                           <expression>
                              <typeConversion>
                                 <typeName>
                                    <elementaryTypeName>address</elementaryTypeName>
                                 </typeName>(<expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>0</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>)</typeConversion>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>balance</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <typeConversion>
                                             <typeName>
                                                <elementaryTypeName>address</elementaryTypeName>
                                             </typeName>(<expression>
                                                <environmentalVariable>this</environmentalVariable>
                                             </expression>)</typeConversion>
                                       </expression>.balance</expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>balance</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>==</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <returnStatement>return<expression>
                                          <primaryExpression>
                                             <booleanLiteral>false</booleanLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </returnStatement>;</statement>
                              </ifStatement>
                           </statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>WETHInterface</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>wethContract</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>.<functionCall>
                                       <functionName>
                                          <identifier>deposit</identifier>
                                       </functionName>
                                       <value>.value(<expression>
                                             <primaryExpression>
                                                <identifier>balance</identifier>
                                             </primaryExpression>
                                          </expression>)</value>
                                       <callArguments>
                                          <tupleExpression>()</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>token</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <primaryExpression>
                                          <identifier>wethContract</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>balance</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>ERC20</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>tokenAddress</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>balanceOf</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <typeConversion>
                                                      <typeName>
                                                         <elementaryTypeName>address</elementaryTypeName>
                                                      </typeName>(<expression>
                                                         <environmentalVariable>this</environmentalVariable>
                                                      </expression>)</typeConversion>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>balance</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>==</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <returnStatement>return<expression>
                                          <primaryExpression>
                                             <booleanLiteral>false</booleanLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </returnStatement>;</statement>
                              </ifStatement>
                           </statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>token</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <primaryExpression>
                                          <identifier>tokenAddress</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>ERC20</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>token</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>.<functionCall>
                                       <functionName>
                                          <identifier>transfer</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <expression>
                                                   <functionCall>
                                                      <functionName>
                                                         <identifier>IBZx</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>bZxContract</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>.<functionCall>
                                                   <functionName>
                                                      <identifier>oracleAddresses</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <primaryExpression>
                                                               <identifier>bZxOracle</identifier>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <identifier>balance</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>transfer of token balance failed</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transferFrom</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_from</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>super</identifier>
                           </primaryExpression>
                        </expression>.<functionCall>
                           <functionName>
                              <identifier>transferFrom</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <primaryExpression>
                                       <identifier>_from</identifier>
                                    </primaryExpression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>_to</identifier>
                                    </primaryExpression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>_value</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>currentPrice</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>denormalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>tokenPrice</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>()</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>balanceOf</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>_from</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>checkpointPrices_</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_from</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <identifier>currentPrice</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>checkpointPrices_</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_from</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>balanceOf</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>_to</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>checkpointPrices_</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_to</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <identifier>currentPrice</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>checkpointPrices_</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_to</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transfer</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>super</identifier>
                           </primaryExpression>
                        </expression>.<functionCall>
                           <functionName>
                              <identifier>transfer</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <primaryExpression>
                                       <identifier>_to</identifier>
                                    </primaryExpression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>_value</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>currentPrice</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>denormalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>tokenPrice</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>()</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>balanceOf</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>checkpointPrices_</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <identifier>currentPrice</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>checkpointPrices_</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>balanceOf</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>_to</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>checkpointPrices_</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_to</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <identifier>currentPrice</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>checkpointPrices_</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <primaryExpression>
                                             <identifier>_to</identifier>
                                          </primaryExpression>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>tokenPrice</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>price</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>netCollateralAmount</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>interestDepositRemaining</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>totalSupply</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>()</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <tupleExpression>(<expression>
                                             <primaryExpression>
                                                <identifier>netCollateralAmount</identifier>
                                             </primaryExpression>
                                          </expression>,<expression>
                                             <primaryExpression>
                                                <identifier>interestDepositRemaining</identifier>
                                             </primaryExpression>
                                          </expression>,)</tupleExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>IBZx</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>bZxContract</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>getTotalEscrow</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>loanOrderHash</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <typeConversion>
                                                      <typeName>
                                                         <elementaryTypeName>address</elementaryTypeName>
                                                      </typeName>(<expression>
                                                         <environmentalVariable>this</environmentalVariable>
                                                      </expression>)</typeConversion>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <returnStatement>return<expression>
                        <functionCall>
                           <functionName>
                              <identifier>_tokenPrice</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <primaryExpression>
                                       <identifier>netCollateralAmount</identifier>
                                    </primaryExpression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>interestDepositRemaining</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>liquidationPrice</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>price</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <tupleExpression>(<expression>
                                 <variableDeclaration>
                                    <typeName>
                                       <elementaryTypeName>uint256</elementaryTypeName>
                                    </typeName>
                                    <identifier>initialMarginAmount</identifier>
                                 </variableDeclaration>
                              </expression>,<expression>
                                 <variableDeclaration>
                                    <typeName>
                                       <elementaryTypeName>uint256</elementaryTypeName>
                                    </typeName>
                                    <identifier>maintenanceMarginAmount</identifier>
                                 </variableDeclaration>
                              </expression>,<expression>
                                 <variableDeclaration>
                                    <typeName>
                                       <elementaryTypeName>uint256</elementaryTypeName>
                                    </typeName>
                                    <identifier>currentMarginAmount</identifier>
                                 </variableDeclaration>
                              </expression>)</tupleExpression>
                        </expression>=<expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>IBZx</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>bZxContract</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>getMarginLevels</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>loanOrderHash</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>address</elementaryTypeName>
                                          </typeName>(<expression>
                                             <environmentalVariable>this</environmentalVariable>
                                          </expression>)</typeConversion>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>maintenanceMarginAmount</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>==</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <returnStatement>return<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </returnStatement>;</statement>else<statement>
                        <ifStatement>if(<condition>
                              <expression>
                                 <expression>
                                    <primaryExpression>
                                       <identifier>currentMarginAmount</identifier>
                                    </primaryExpression>
                                 </expression>&lt;=<expression>
                                    <primaryExpression>
                                       <identifier>maintenanceMarginAmount</identifier>
                                    </primaryExpression>
                                 </expression>
                              </expression>
                           </condition>)<statement>
                              <returnStatement>return<expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>tokenPrice</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>()</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </returnStatement>;</statement>
                        </ifStatement>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>initialPrice</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>currentPrice</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>tokenPrice</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>()</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>offset</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>currentPrice</identifier>
                              </primaryExpression>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>mul</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>initialMarginAmount</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>currentMarginAmount</identifier>
                              </primaryExpression>
                           </expression>&gt;=<expression>
                              <primaryExpression>
                                 <identifier>initialMarginAmount</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>offset</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>offset</identifier>
                                             </primaryExpression>
                                          </expression>.<functionCall>
                                             <functionName>
                                                <identifier>mul</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>currentMarginAmount</identifier>
                                                         </primaryExpression>
                                                      </expression>
                                                      <plusminusOperator>
                                                         <minusOperator>-</minusOperator>
                                                      </plusminusOperator>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>initialMarginAmount</identifier>
                                                         </primaryExpression>
                                                      </expression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>div</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>10</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>
                                                   <powerOperator>**</powerOperator>
                                                   <expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>40</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>initialPrice</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>currentPrice</identifier>
                                          </primaryExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>sub</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>offset</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>offset</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>offset</identifier>
                                             </primaryExpression>
                                          </expression>.<functionCall>
                                             <functionName>
                                                <identifier>mul</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>initialMarginAmount</identifier>
                                                         </primaryExpression>
                                                      </expression>
                                                      <plusminusOperator>
                                                         <minusOperator>-</minusOperator>
                                                      </plusminusOperator>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>currentMarginAmount</identifier>
                                                         </primaryExpression>
                                                      </expression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>div</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>10</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>
                                                   <powerOperator>**</powerOperator>
                                                   <expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>40</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>initialPrice</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>currentPrice</identifier>
                                          </primaryExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>add</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>offset</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>initialLeverage</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>SafeMath</identifier>
                              </primaryExpression>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>div</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>10</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                       <powerOperator>**</powerOperator>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>38</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>initialMarginAmount</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>currentLeverage</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>SafeMath</identifier>
                              </primaryExpression>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>div</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>10</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                       <powerOperator>**</powerOperator>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>38</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>currentMarginAmount</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>price</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>initialPrice</identifier>
                                 </primaryExpression>
                              </expression>.<functionCall>
                                 <functionName>
                                    <identifier>mul</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <expression>
                                             <expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>maintenanceMarginAmount</identifier>
                                                   </primaryExpression>
                                                </expression>.<functionCall>
                                                   <functionName>
                                                      <identifier>mul</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <primaryExpression>
                                                               <identifier>currentLeverage</identifier>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>.<functionCall>
                                                <functionName>
                                                   <identifier>div</identifier>
                                                </functionName>
                                                <callArguments>
                                                   <tupleExpression>(<expression>
                                                         <expression>
                                                            <primaryExpression>
                                                               <numberLiteral>
                                                                  <decimalNumber>10</decimalNumber>
                                                               </numberLiteral>
                                                            </primaryExpression>
                                                         </expression>
                                                         <powerOperator>**</powerOperator>
                                                         <expression>
                                                            <primaryExpression>
                                                               <numberLiteral>
                                                                  <decimalNumber>20</decimalNumber>
                                                               </numberLiteral>
                                                            </primaryExpression>
                                                         </expression>
                                                      </expression>)</tupleExpression>
                                                </callArguments>
                                             </functionCall>
                                          </expression>.<functionCall>
                                             <functionName>
                                                <identifier>add</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>initialLeverage</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>div</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>initialLeverage</identifier>
                                          </primaryExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>add</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>10</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>
                                                   <powerOperator>**</powerOperator>
                                                   <expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>18</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>checkpointPrice</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_user</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>price</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <functionCall>
                           <functionName>
                              <identifier>normalize</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>checkpointPrices_</identifier>
                                       </primaryExpression>
                                    </expression>[<expression>
                                       <primaryExpression>
                                          <identifier>_user</identifier>
                                       </primaryExpression>
                                    </expression>]</expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>currentLeverage</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>leverage</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <tupleExpression>(,,<expression>
                                 <variableDeclaration>
                                    <typeName>
                                       <elementaryTypeName>uint256</elementaryTypeName>
                                    </typeName>
                                    <identifier>currentMarginAmount</identifier>
                                 </variableDeclaration>
                              </expression>)</tupleExpression>
                        </expression>=<expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>IBZx</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>bZxContract</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>getMarginLevels</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>loanOrderHash</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>address</elementaryTypeName>
                                          </typeName>(<expression>
                                             <environmentalVariable>this</environmentalVariable>
                                          </expression>)</typeConversion>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>currentMarginAmount</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>==</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <returnStatement>return<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </returnStatement>;</statement>
                  </ifStatement>
               </statement>
               <statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>SafeMath</identifier>
                           </primaryExpression>
                        </expression>.<functionCall>
                           <functionName>
                              <identifier>div</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>10</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                    <powerOperator>**</powerOperator>
                                    <expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>38</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>currentMarginAmount</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>marketLiquidityForLoan</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <functionCall>
                              <functionName>
                                 <identifier>ILoanToken</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>loanTokenLender</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>.<functionCall>
                           <functionName>
                              <identifier>getMaxEscrowAmount</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <primaryExpression>
                                       <identifier>leverageAmount</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>positionValue</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_owner</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>value</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>value</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <expression>
                                 <functionCall>
                                    <functionName>
                                       <identifier>balanceOf</identifier>
                                    </functionName>
                                    <callArguments>
                                       <tupleExpression>(<expression>
                                             <primaryExpression>
                                                <identifier>_owner</identifier>
                                             </primaryExpression>
                                          </expression>)</tupleExpression>
                                    </callArguments>
                                 </functionCall>
                              </expression>.<functionCall>
                                 <functionName>
                                    <identifier>mul</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>tokenPrice</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>()</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>div</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>tradeTokenAdjustment</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <primaryExpression>
                              <identifier>shortPosition</identifier>
                           </primaryExpression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <tupleExpression>(<expression>
                                             <variableDeclaration>
                                                <typeName>
                                                   <elementaryTypeName>uint256</elementaryTypeName>
                                                </typeName>
                                                <identifier>sourceToDestRate</identifier>
                                             </variableDeclaration>
                                          </expression>,<expression>
                                             <variableDeclaration>
                                                <typeName>
                                                   <elementaryTypeName>uint256</elementaryTypeName>
                                                </typeName>
                                                <identifier>sourceToDestPrecision</identifier>
                                             </variableDeclaration>
                                          </expression>,)</tupleExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>IBZxOracle</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>bZxOracle</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>getTradeData</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>tradeTokenAddress</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <primaryExpression>
                                                      <identifier>loanTokenAddress</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <primaryExpression>
                                                      <identifier>MAX_UINT</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>value</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>value</identifier>
                                             </primaryExpression>
                                          </expression>.<functionCall>
                                             <functionName>
                                                <identifier>mul</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>sourceToDestRate</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>div</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>sourceToDestPrecision</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>positionTokenPrice</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>price</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>sourceToDestRate</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>sourceToDestPrecision</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <primaryExpression>
                              <identifier>shortPosition</identifier>
                           </primaryExpression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <tupleExpression>(<expression>
                                             <primaryExpression>
                                                <identifier>sourceToDestRate</identifier>
                                             </primaryExpression>
                                          </expression>,<expression>
                                             <primaryExpression>
                                                <identifier>sourceToDestPrecision</identifier>
                                             </primaryExpression>
                                          </expression>,)</tupleExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>IBZxOracle</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>bZxOracle</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>getTradeData</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>loanTokenAddress</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <primaryExpression>
                                                      <identifier>tradeTokenAddress</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <primaryExpression>
                                                      <identifier>MAX_UINT</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>price</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>sourceToDestRate</identifier>
                                             </primaryExpression>
                                          </expression>.<functionCall>
                                             <functionName>
                                                <identifier>mul</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <numberLiteral>
                                                               <decimalNumber>10</decimalNumber>
                                                            </numberLiteral>
                                                         </primaryExpression>
                                                      </expression>
                                                      <powerOperator>**</powerOperator>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>loanTokenDecimals</identifier>
                                                         </primaryExpression>
                                                      </expression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>div</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>sourceToDestPrecision</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <tupleExpression>(<expression>
                                             <primaryExpression>
                                                <identifier>sourceToDestRate</identifier>
                                             </primaryExpression>
                                          </expression>,<expression>
                                             <primaryExpression>
                                                <identifier>sourceToDestPrecision</identifier>
                                             </primaryExpression>
                                          </expression>,)</tupleExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>IBZxOracle</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>bZxOracle</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>getTradeData</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>tradeTokenAddress</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <primaryExpression>
                                                      <identifier>loanTokenAddress</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <primaryExpression>
                                                      <identifier>MAX_UINT</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>price</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>sourceToDestRate</identifier>
                                             </primaryExpression>
                                          </expression>.<functionCall>
                                             <functionName>
                                                <identifier>mul</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <numberLiteral>
                                                               <decimalNumber>10</decimalNumber>
                                                            </numberLiteral>
                                                         </primaryExpression>
                                                      </expression>
                                                      <powerOperator>**</powerOperator>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>tradeTokenDecimals</identifier>
                                                         </primaryExpression>
                                                      </expression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>div</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>sourceToDestPrecision</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>_mintWithToken</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>receiver</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>depositTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>depositAmount</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>currentPrice</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>uint256</elementaryTypeName>
                           </typeName>
                           <identifier>refundAmount</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>depositTokenAddress</identifier>
                                 </primaryExpression>
                              </expression>
                              <comparison>!=</comparison>
                              <expression>
                                 <primaryExpression>
                                    <identifier>tradeTokenAddress</identifier>
                                 </primaryExpression>
                              </expression>
                           </expression>&amp;&amp;<expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>depositTokenAddress</identifier>
                                 </primaryExpression>
                              </expression>
                              <comparison>!=</comparison>
                              <expression>
                                 <primaryExpression>
                                    <identifier>loanTokenAddress</identifier>
                                 </primaryExpression>
                              </expression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <tupleExpression>(<expression>
                                             <variableDeclaration>
                                                <typeName>
                                                   <elementaryTypeName>uint256</elementaryTypeName>
                                                </typeName>
                                                <identifier>destTokenAmountReceived</identifier>
                                             </variableDeclaration>
                                          </expression>,<expression>
                                             <variableDeclaration>
                                                <typeName>
                                                   <elementaryTypeName>uint256</elementaryTypeName>
                                                </typeName>
                                                <identifier>depositAmountUsed</identifier>
                                             </variableDeclaration>
                                          </expression>)</tupleExpression>
                                    </expression>=<expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>_tradeUserAsset</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>depositTokenAddress</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <primaryExpression>
                                                      <identifier>tradeTokenAddress</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <typeConversion>
                                                      <typeName>
                                                         <elementaryTypeName>address</elementaryTypeName>
                                                      </typeName>(<expression>
                                                         <environmentalVariable>this</environmentalVariable>
                                                      </expression>)</typeConversion>
                                                </expression>,<expression>
                                                   <primaryExpression>
                                                      <identifier>depositAmount</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>depositAmount</identifier>
                                          </primaryExpression>
                                       </expression>&gt;<expression>
                                          <primaryExpression>
                                             <identifier>depositAmountUsed</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>refundAmount</identifier>
                                                   </primaryExpression>
                                                </expression>=<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>depositAmount</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                   <plusminusOperator>
                                                      <minusOperator>-</minusOperator>
                                                   </plusminusOperator>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>depositAmountUsed</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <ifStatement>if(<condition>
                                                <expression>
                                                   <expression>
                                                      <environmentalVariable>msg.value</environmentalVariable>
                                                   </expression>
                                                   <comparison>==</comparison>
                                                   <expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>0</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>
                                             </condition>)<statement>
                                                <block>{<statement>
                                                      <expressionStatement>
                                                         <expression>
                                                            <functionCall>
                                                               <functionName>
                                                                  <identifier>require</identifier>
                                                               </functionName>
                                                               <callArguments>
                                                                  <tupleExpression>(<expression>
                                                                        <expression>
                                                                           <functionCall>
                                                                              <functionName>
                                                                                 <identifier>ERC20</identifier>
                                                                              </functionName>
                                                                              <callArguments>
                                                                                 <tupleExpression>(<expression>
                                                                                       <primaryExpression>
                                                                                          <identifier>depositTokenAddress</identifier>
                                                                                       </primaryExpression>
                                                                                    </expression>)</tupleExpression>
                                                                              </callArguments>
                                                                           </functionCall>
                                                                        </expression>.<functionCall>
                                                                           <functionName>
                                                                              <identifier>transfer</identifier>
                                                                           </functionName>
                                                                           <callArguments>
                                                                              <tupleExpression>(<expression>
                                                                                    <environmentalVariable>msg.sender</environmentalVariable>
                                                                                 </expression>,<expression>
                                                                                    <primaryExpression>
                                                                                       <identifier>refundAmount</identifier>
                                                                                    </primaryExpression>
                                                                                 </expression>)</tupleExpression>
                                                                           </callArguments>
                                                                        </functionCall>
                                                                     </expression>,<expression>
                                                                        <primaryExpression>
                                                                           <stringLiteral>transfer of token failed</stringLiteral>
                                                                        </primaryExpression>
                                                                     </expression>)</tupleExpression>
                                                               </callArguments>
                                                            </functionCall>
                                                         </expression>
                                                      </expressionStatement>;</statement>}</block>
                                             </statement>else<statement>
                                                <block>{<statement>
                                                      <expressionStatement>
                                                         <expression>
                                                            <expression>
                                                               <functionCall>
                                                                  <functionName>
                                                                     <identifier>WETHInterface</identifier>
                                                                  </functionName>
                                                                  <callArguments>
                                                                     <tupleExpression>(<expression>
                                                                           <primaryExpression>
                                                                              <identifier>wethContract</identifier>
                                                                           </primaryExpression>
                                                                        </expression>)</tupleExpression>
                                                                  </callArguments>
                                                               </functionCall>
                                                            </expression>.<functionCall>
                                                               <functionName>
                                                                  <identifier>withdraw</identifier>
                                                               </functionName>
                                                               <callArguments>
                                                                  <tupleExpression>(<expression>
                                                                        <primaryExpression>
                                                                           <identifier>refundAmount</identifier>
                                                                        </primaryExpression>
                                                                     </expression>)</tupleExpression>
                                                               </callArguments>
                                                            </functionCall>
                                                         </expression>
                                                      </expressionStatement>;</statement>
                                                   <statement>
                                                      <expressionStatement>
                                                         <expression>
                                                            <functionCall>
                                                               <functionName>
                                                                  <identifier>require</identifier>
                                                               </functionName>
                                                               <callArguments>
                                                                  <tupleExpression>(<expression>
                                                                        <expression>
                                                                           <environmentalVariable>msg.sender</environmentalVariable>
                                                                        </expression>.<functionCall>
                                                                           <functionName>
                                                                              <identifier>send</identifier>
                                                                           </functionName>
                                                                           <callArguments>
                                                                              <tupleExpression>(<expression>
                                                                                    <primaryExpression>
                                                                                       <identifier>refundAmount</identifier>
                                                                                    </primaryExpression>
                                                                                 </expression>)</tupleExpression>
                                                                           </callArguments>
                                                                        </functionCall>
                                                                     </expression>,<expression>
                                                                        <primaryExpression>
                                                                           <stringLiteral>transfer of ETH failed</stringLiteral>
                                                                        </primaryExpression>
                                                                     </expression>)</tupleExpression>
                                                               </callArguments>
                                                            </functionCall>
                                                         </expression>
                                                      </expressionStatement>;</statement>}</block>
                                             </statement>
                                          </ifStatement>
                                       </statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>depositAmount</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <primaryExpression>
                                          <identifier>destTokenAmountReceived</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>depositTokenAddress</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <primaryExpression>
                                          <identifier>tradeTokenAddress</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>depositAmount</identifier>
                                       </primaryExpression>
                                    </expression>&gt;=<expression>
                                       <tupleExpression>(<expression>
                                             <expression>
                                                <expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>10</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>
                                                   <powerOperator>**</powerOperator>
                                                   <expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>15</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>
                                                <muldivOperator>
                                                   <mulOperator>*</mulOperator>
                                                </muldivOperator>
                                                <expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>10</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>
                                                   <powerOperator>**</powerOperator>
                                                   <expression>
                                                      <typeConversion>
                                                         <typeName>
                                                            <elementaryTypeName>uint256</elementaryTypeName>
                                                         </typeName>(<expression>
                                                            <primaryExpression>
                                                               <identifier>decimals</identifier>
                                                            </primaryExpression>
                                                         </expression>)</typeConversion>
                                                   </expression>
                                                </expression>
                                             </expression>
                                             <muldivOperator>
                                                <divOperator>/</divOperator>
                                             </muldivOperator>
                                             <expression>
                                                <tupleExpression>(<expression>
                                                      <expression>
                                                         <expression>
                                                            <primaryExpression>
                                                               <identifier>depositTokenAddress</identifier>
                                                            </primaryExpression>
                                                         </expression>
                                                         <comparison>==</comparison>
                                                         <expression>
                                                            <primaryExpression>
                                                               <identifier>tradeTokenAddress</identifier>
                                                            </primaryExpression>
                                                         </expression>
                                                      </expression>?<expression>
                                                         <primaryExpression>
                                                            <identifier>tradeTokenAdjustment</identifier>
                                                         </primaryExpression>
                                                      </expression>:<expression>
                                                         <primaryExpression>
                                                            <identifier>loanTokenAdjustment</identifier>
                                                         </primaryExpression>
                                                      </expression>
                                                   </expression>)</tupleExpression>
                                             </expression>
                                          </expression>)</tupleExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>depositAmount too low</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>_triggerPosition</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <primaryExpression>
                                       <identifier>depositTokenAddress</identifier>
                                    </primaryExpression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>depositAmount</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <tupleExpression>(<expression>
                                 <variableDeclaration>
                                    <typeName>
                                       <elementaryTypeName>uint256</elementaryTypeName>
                                    </typeName>
                                    <identifier>netCollateralAmount</identifier>
                                 </variableDeclaration>
                              </expression>,<expression>
                                 <variableDeclaration>
                                    <typeName>
                                       <elementaryTypeName>uint256</elementaryTypeName>
                                    </typeName>
                                    <identifier>interestDepositRemaining</identifier>
                                 </variableDeclaration>
                              </expression>,)</tupleExpression>
                        </expression>=<expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>IBZx</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>bZxContract</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>getTotalEscrow</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>loanOrderHash</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>address</elementaryTypeName>
                                          </typeName>(<expression>
                                             <environmentalVariable>this</environmentalVariable>
                                          </expression>)</typeConversion>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>postEntrySupply</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <expression>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>ERC20</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>tradeTokenAddress</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>balanceOf</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <typeConversion>
                                                      <typeName>
                                                         <elementaryTypeName>address</elementaryTypeName>
                                                      </typeName>(<expression>
                                                         <environmentalVariable>this</environmentalVariable>
                                                      </expression>)</typeConversion>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>.<functionCall>
                                       <functionName>
                                          <identifier>add</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <identifier>netCollateralAmount</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>.<functionCall>
                                    <functionName>
                                       <identifier>add</identifier>
                                    </functionName>
                                    <callArguments>
                                       <tupleExpression>(<expression>
                                             <primaryExpression>
                                                <identifier>interestDepositRemaining</identifier>
                                             </primaryExpression>
                                          </expression>)</tupleExpression>
                                    </callArguments>
                                 </functionCall>
                              </expression>.<functionCall>
                                 <functionName>
                                    <identifier>mul</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>tradeTokenAdjustment</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>div</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>currentPrice</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>postEntrySupply</identifier>
                                       </primaryExpression>
                                    </expression>&gt;<expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>totalSupply</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>()</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>supply not added</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>mintAmount</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>postEntrySupply</identifier>
                              </primaryExpression>
                           </expression>
                           <plusminusOperator>
                              <minusOperator>-</minusOperator>
                           </plusminusOperator>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>totalSupply</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>()</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>_mint</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <primaryExpression>
                                       <identifier>receiver</identifier>
                                    </primaryExpression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>mintAmount</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Mint</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <primaryExpression>
                                 <identifier>receiver</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>depositTokenAddress</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>depositAmount</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>mintAmount</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>currentPrice</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>checkpointPrices_</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>receiver</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>denormalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>currentPrice</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <identifier>mintAmount</identifier>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>_burnToken</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>burnAmount</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>minPriceAllowed</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>tradeTokenAmountOwed</identifier>
                  </parameter>,<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>currentPrice</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>burnAmount</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <comparison>!=</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>burnAmount == 0</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>burnAmount</identifier>
                              </primaryExpression>
                           </expression>&gt;<expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>balanceOf</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>burnAmount</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>balanceOf</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <environmentalVariable>msg.sender</environmentalVariable>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <tupleExpression>(<expression>
                                 <variableDeclaration>
                                    <typeName>
                                       <elementaryTypeName>uint256</elementaryTypeName>
                                    </typeName>
                                    <identifier>netCollateralAmount</identifier>
                                 </variableDeclaration>
                              </expression>,<expression>
                                 <variableDeclaration>
                                    <typeName>
                                       <elementaryTypeName>uint256</elementaryTypeName>
                                    </typeName>
                                    <identifier>interestDepositRemaining</identifier>
                                 </variableDeclaration>
                              </expression>,)</tupleExpression>
                        </expression>=<expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>IBZx</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>bZxContract</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>getTotalEscrow</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>loanOrderHash</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>address</elementaryTypeName>
                                          </typeName>(<expression>
                                             <environmentalVariable>this</environmentalVariable>
                                          </expression>)</typeConversion>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>currentPrice</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>_tokenPrice</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>netCollateralAmount</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>interestDepositRemaining</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>minPriceAllowed</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>require</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>currentPrice</identifier>
                                                   </primaryExpression>
                                                </expression>&gt;=<expression>
                                                   <primaryExpression>
                                                      <identifier>minPriceAllowed</identifier>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <stringLiteral>price too low</stringLiteral>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>tradeTokenAmountOwed</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>burnAmount</identifier>
                                 </primaryExpression>
                              </expression>.<functionCall>
                                 <functionName>
                                    <identifier>mul</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>currentPrice</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>div</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>tradeTokenAdjustment</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>tradeTokenAmountAvailableInContract</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>ERC20</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>tradeTokenAddress</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>balanceOf</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>address</elementaryTypeName>
                                          </typeName>(<expression>
                                             <environmentalVariable>this</environmentalVariable>
                                          </expression>)</typeConversion>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>preCloseEscrow</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>tradeTokenAmountAvailableInContract</identifier>
                                 </primaryExpression>
                              </expression>.<functionCall>
                                 <functionName>
                                    <identifier>add</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>netCollateralAmount</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>add</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>interestDepositRemaining</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <variableDeclaration>
                           <typeName>
                              <elementaryTypeName>bool</elementaryTypeName>
                           </typeName>
                           <identifier>didCallWithdraw</identifier>
                        </variableDeclaration>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>tradeTokenAmountAvailableInContract</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>tradeTokenAmountOwed</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>IBZx</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>bZxContract</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>.<functionCall>
                                       <functionName>
                                          <identifier>closeLoanPartiallyFromCollateral</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <identifier>loanOrderHash</identifier>
                                                </primaryExpression>
                                             </expression>,<expression>
                                                <expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>burnAmount</identifier>
                                                      </primaryExpression>
                                                   </expression>&lt;<expression>
                                                      <functionCall>
                                                         <functionName>
                                                            <identifier>totalSupply</identifier>
                                                         </functionName>
                                                         <callArguments>
                                                            <tupleExpression>()</tupleExpression>
                                                         </callArguments>
                                                      </functionCall>
                                                   </expression>
                                                </expression>?<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>tradeTokenAmountOwed</identifier>
                                                      </primaryExpression>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>sub</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>tradeTokenAmountAvailableInContract</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>:<expression>
                                                   <primaryExpression>
                                                      <identifier>MAX_UINT</identifier>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>tradeTokenAmountAvailableInContract</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>ERC20</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>tradeTokenAddress</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>balanceOf</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <typeConversion>
                                                      <typeName>
                                                         <elementaryTypeName>address</elementaryTypeName>
                                                      </typeName>(<expression>
                                                         <environmentalVariable>this</environmentalVariable>
                                                      </expression>)</typeConversion>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>didCallWithdraw</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <primaryExpression>
                                          <booleanLiteral>true</booleanLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>tradeTokenAmountAvailableInContract</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>tradeTokenAmountOwed</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <variableDeclaration>
                                          <typeName>
                                             <elementaryTypeName>uint256</elementaryTypeName>
                                          </typeName>
                                          <identifier>collateralWithdrawn</identifier>
                                       </variableDeclaration>
                                    </expression>=<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>IBZx</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>bZxContract</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>withdrawCollateral</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>loanOrderHash</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>tradeTokenAmountOwed</identifier>
                                                      </primaryExpression>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>sub</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>tradeTokenAmountAvailableInContract</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>collateralWithdrawn</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>!=</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>tradeTokenAmountAvailableInContract</identifier>
                                                   </primaryExpression>
                                                </expression>=<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>tradeTokenAmountAvailableInContract</identifier>
                                                      </primaryExpression>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>add</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>collateralWithdrawn</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>didCallWithdraw</identifier>
                                                   </primaryExpression>
                                                </expression>=<expression>
                                                   <primaryExpression>
                                                      <booleanLiteral>true</booleanLiteral>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <primaryExpression>
                              <identifier>didCallWithdraw</identifier>
                           </primaryExpression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <tupleExpression>(<expression>
                                             <primaryExpression>
                                                <identifier>netCollateralAmount</identifier>
                                             </primaryExpression>
                                          </expression>,<expression>
                                             <primaryExpression>
                                                <identifier>interestDepositRemaining</identifier>
                                             </primaryExpression>
                                          </expression>,)</tupleExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>IBZx</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>bZxContract</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>getTotalEscrow</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>loanOrderHash</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <typeConversion>
                                                      <typeName>
                                                         <elementaryTypeName>address</elementaryTypeName>
                                                      </typeName>(<expression>
                                                         <environmentalVariable>this</environmentalVariable>
                                                      </expression>)</typeConversion>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <variableDeclaration>
                                          <typeName>
                                             <elementaryTypeName>uint256</elementaryTypeName>
                                          </typeName>
                                          <identifier>postCloseEscrow</identifier>
                                       </variableDeclaration>
                                    </expression>=<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>tradeTokenAmountAvailableInContract</identifier>
                                             </primaryExpression>
                                          </expression>.<functionCall>
                                             <functionName>
                                                <identifier>add</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>netCollateralAmount</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>add</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>interestDepositRemaining</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>postCloseEscrow</identifier>
                                          </primaryExpression>
                                       </expression>&lt;<expression>
                                          <primaryExpression>
                                             <identifier>preCloseEscrow</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <variableDeclaration>
                                                      <typeName>
                                                         <elementaryTypeName>uint256</elementaryTypeName>
                                                      </typeName>
                                                      <identifier>slippageLoss</identifier>
                                                   </variableDeclaration>
                                                </expression>=<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>preCloseEscrow</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                   <plusminusOperator>
                                                      <minusOperator>-</minusOperator>
                                                   </plusminusOperator>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>postCloseEscrow</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <expressionStatement>
                                             <expression>
                                                <functionCall>
                                                   <functionName>
                                                      <identifier>require</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <expression>
                                                               <primaryExpression>
                                                                  <identifier>tradeTokenAmountOwed</identifier>
                                                               </primaryExpression>
                                                            </expression>&gt;<expression>
                                                               <primaryExpression>
                                                                  <identifier>slippageLoss</identifier>
                                                               </primaryExpression>
                                                            </expression>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <stringLiteral>slippage too great</stringLiteral>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>tradeTokenAmountOwed</identifier>
                                                   </primaryExpression>
                                                </expression>=<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>tradeTokenAmountOwed</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                   <plusminusOperator>
                                                      <minusOperator>-</minusOperator>
                                                   </plusminusOperator>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>slippageLoss</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>else<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>tradeTokenAmountOwed</identifier>
                                                   </primaryExpression>
                                                </expression>=<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>tradeTokenAmountOwed</identifier>
                                                      </primaryExpression>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>add</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <expression>
                                                                  <primaryExpression>
                                                                     <identifier>postCloseEscrow</identifier>
                                                                  </primaryExpression>
                                                               </expression>
                                                               <plusminusOperator>
                                                                  <minusOperator>-</minusOperator>
                                                               </plusminusOperator>
                                                               <expression>
                                                                  <primaryExpression>
                                                                     <identifier>preCloseEscrow</identifier>
                                                                  </primaryExpression>
                                                               </expression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>tradeTokenAmountOwed</identifier>
                                          </primaryExpression>
                                       </expression>&gt;<expression>
                                          <primaryExpression>
                                             <identifier>tradeTokenAmountAvailableInContract</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>tradeTokenAmountOwed</identifier>
                                                   </primaryExpression>
                                                </expression>=<expression>
                                                   <primaryExpression>
                                                      <identifier>tradeTokenAmountAvailableInContract</identifier>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>burnAmount</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>==</comparison>
                                       <expression>
                                          <functionCall>
                                             <functionName>
                                                <identifier>balanceOf</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <environmentalVariable>msg.sender</environmentalVariable>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>
                                    </expression>||<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>tradeTokenAmountOwed</identifier>
                                          </primaryExpression>
                                       </expression>&gt;=<expression>
                                          <tupleExpression>(<expression>
                                                <expression>
                                                   <expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <numberLiteral>
                                                               <decimalNumber>10</decimalNumber>
                                                            </numberLiteral>
                                                         </primaryExpression>
                                                      </expression>
                                                      <powerOperator>**</powerOperator>
                                                      <expression>
                                                         <primaryExpression>
                                                            <numberLiteral>
                                                               <decimalNumber>15</decimalNumber>
                                                            </numberLiteral>
                                                         </primaryExpression>
                                                      </expression>
                                                   </expression>
                                                   <muldivOperator>
                                                      <mulOperator>*</mulOperator>
                                                   </muldivOperator>
                                                   <expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <numberLiteral>
                                                               <decimalNumber>10</decimalNumber>
                                                            </numberLiteral>
                                                         </primaryExpression>
                                                      </expression>
                                                      <powerOperator>**</powerOperator>
                                                      <expression>
                                                         <typeConversion>
                                                            <typeName>
                                                               <elementaryTypeName>uint256</elementaryTypeName>
                                                            </typeName>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>decimals</identifier>
                                                               </primaryExpression>
                                                            </expression>)</typeConversion>
                                                      </expression>
                                                   </expression>
                                                </expression>
                                                <muldivOperator>
                                                   <divOperator>/</divOperator>
                                                </muldivOperator>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>tradeTokenAdjustment</identifier>
                                                   </primaryExpression>
                                                </expression>
                                             </expression>)</tupleExpression>
                                       </expression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>burnAmount too low</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>_burn</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <environmentalVariable>msg.sender</environmentalVariable>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>burnAmount</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <expression>
                                 <functionCall>
                                    <functionName>
                                       <identifier>totalSupply</identifier>
                                    </functionName>
                                    <callArguments>
                                       <tupleExpression>()</tupleExpression>
                                    </callArguments>
                                 </functionCall>
                              </expression>
                              <comparison>==</comparison>
                              <expression>
                                 <primaryExpression>
                                    <numberLiteral>
                                       <decimalNumber>0</decimalNumber>
                                    </numberLiteral>
                                 </primaryExpression>
                              </expression>
                           </expression>||<expression>
                              <expression>
                                 <functionCall>
                                    <functionName>
                                       <identifier>tokenPrice</identifier>
                                    </functionName>
                                    <callArguments>
                                       <tupleExpression>()</tupleExpression>
                                    </callArguments>
                                 </functionCall>
                              </expression>
                              <comparison>==</comparison>
                              <expression>
                                 <primaryExpression>
                                    <numberLiteral>
                                       <decimalNumber>0</decimalNumber>
                                    </numberLiteral>
                                 </primaryExpression>
                              </expression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>splitFactor</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>10</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                       <powerOperator>**</powerOperator>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>18</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>currentPrice</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <primaryExpression>
                                          <identifier>initialPrice</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>balanceOf</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>checkpointPrices_</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>]</expression>=<expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>denormalize</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>currentPrice</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>checkpointPrices_</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <environmentalVariable>msg.sender</environmentalVariable>
                                       </expression>]</expression>=<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>_tradeUserAsset</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>sourceTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>destTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>receiver</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>sourceTokenAmount</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>destTokenAmountReceived</identifier>
                  </parameter>,<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                     <identifier>sourceTokenAmountUsed</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>address</elementaryTypeName>
                              </typeName>
                              <identifier>oracleAddress</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>IBZx</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>bZxContract</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>oracleAddresses</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>bZxOracle</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>tempAllowance</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>ERC20</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>sourceTokenAddress</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>allowance</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>address</elementaryTypeName>
                                          </typeName>(<expression>
                                             <environmentalVariable>this</environmentalVariable>
                                          </expression>)</typeConversion>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>oracleAddress</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>tempAllowance</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>sourceTokenAmount</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>tempAllowance</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>!=</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <functionCall>
                                                   <functionName>
                                                      <identifier>require</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <expression>
                                                               <functionCall>
                                                                  <functionName>
                                                                     <identifier>ERC20</identifier>
                                                                  </functionName>
                                                                  <callArguments>
                                                                     <tupleExpression>(<expression>
                                                                           <primaryExpression>
                                                                              <identifier>sourceTokenAddress</identifier>
                                                                           </primaryExpression>
                                                                        </expression>)</tupleExpression>
                                                                  </callArguments>
                                                               </functionCall>
                                                            </expression>.<functionCall>
                                                               <functionName>
                                                                  <identifier>approve</identifier>
                                                               </functionName>
                                                               <callArguments>
                                                                  <tupleExpression>(<expression>
                                                                        <primaryExpression>
                                                                           <identifier>oracleAddress</identifier>
                                                                        </primaryExpression>
                                                                     </expression>,<expression>
                                                                        <primaryExpression>
                                                                           <numberLiteral>
                                                                              <decimalNumber>0</decimalNumber>
                                                                           </numberLiteral>
                                                                        </primaryExpression>
                                                                     </expression>)</tupleExpression>
                                                               </callArguments>
                                                            </functionCall>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <stringLiteral>token approval reset failed</stringLiteral>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>require</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <expression>
                                                   <functionCall>
                                                      <functionName>
                                                         <identifier>ERC20</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>sourceTokenAddress</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>.<functionCall>
                                                   <functionName>
                                                      <identifier>approve</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <primaryExpression>
                                                               <identifier>oracleAddress</identifier>
                                                            </primaryExpression>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <identifier>MAX_UINT</identifier>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <stringLiteral>token approval failed</stringLiteral>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <tupleExpression>(<expression>
                                 <primaryExpression>
                                    <identifier>destTokenAmountReceived</identifier>
                                 </primaryExpression>
                              </expression>,<expression>
                                 <primaryExpression>
                                    <identifier>sourceTokenAmountUsed</identifier>
                                 </primaryExpression>
                              </expression>)</tupleExpression>
                        </expression>=<expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>IBZxOracle</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>oracleAddress</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>tradeUserAsset</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>sourceTokenAddress</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>destTokenAddress</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>receiver</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>receiver</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>sourceTokenAmount</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>MAX_UINT</identifier>
                                       </primaryExpression>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>_triggerPosition</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>depositTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>depositAmount</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <expression>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>tradeTokenAddress</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <comparison>==</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>wethContract</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>||<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>loanTokenAddress</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <comparison>==</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>wethContract</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expression>||<expression>
                                 <expression>
                                    <primaryExpression>
                                       <identifier>depositAmount</identifier>
                                    </primaryExpression>
                                 </expression>
                                 <comparison>==</comparison>
                                 <expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>0</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>
                              </expression>
                           </expression>||<expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>depositAmount</identifier>
                                 </primaryExpression>
                              </expression>
                              <comparison>==</comparison>
                              <expression>
                                 <primaryExpression>
                                    <identifier>MAX_UINT</identifier>
                                 </primaryExpression>
                              </expression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <variableDeclaration>
                                          <typeName>
                                             <elementaryTypeName>uint256</elementaryTypeName>
                                          </typeName>
                                          <identifier>ethBalance</identifier>
                                       </variableDeclaration>
                                    </expression>=<expression>
                                       <expression>
                                          <typeConversion>
                                             <typeName>
                                                <elementaryTypeName>address</elementaryTypeName>
                                             </typeName>(<expression>
                                                <environmentalVariable>this</environmentalVariable>
                                             </expression>)</typeConversion>
                                       </expression>.balance</expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>ethBalance</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>!=</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <functionCall>
                                                      <functionName>
                                                         <identifier>WETHInterface</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>wethContract</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>.<functionCall>
                                                   <functionName>
                                                      <identifier>deposit</identifier>
                                                   </functionName>
                                                   <value>.value(<expression>
                                                         <primaryExpression>
                                                            <identifier>ethBalance</identifier>
                                                         </primaryExpression>
                                                      </expression>)</value>
                                                   <callArguments>
                                                      <tupleExpression>()</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <ifStatement>if(<condition>
                                                <expression>
                                                   <expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>tradeTokenAddress</identifier>
                                                         </primaryExpression>
                                                      </expression>
                                                      <comparison>!=</comparison>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>wethContract</identifier>
                                                         </primaryExpression>
                                                      </expression>
                                                   </expression>&amp;&amp;<expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>loanTokenAddress</identifier>
                                                         </primaryExpression>
                                                      </expression>
                                                      <comparison>!=</comparison>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>wethContract</identifier>
                                                         </primaryExpression>
                                                      </expression>
                                                   </expression>
                                                </expression>
                                             </condition>)<statement>
                                                <block>{<statement>
                                                      <expressionStatement>
                                                         <expression>
                                                            <functionCall>
                                                               <functionName>
                                                                  <identifier>_tradeUserAsset</identifier>
                                                               </functionName>
                                                               <callArguments>
                                                                  <tupleExpression>(<expression>
                                                                        <primaryExpression>
                                                                           <identifier>wethContract</identifier>
                                                                        </primaryExpression>
                                                                     </expression>,<expression>
                                                                        <primaryExpression>
                                                                           <identifier>tradeTokenAddress</identifier>
                                                                        </primaryExpression>
                                                                     </expression>,<expression>
                                                                        <typeConversion>
                                                                           <typeName>
                                                                              <elementaryTypeName>address</elementaryTypeName>
                                                                           </typeName>(<expression>
                                                                              <environmentalVariable>this</environmentalVariable>
                                                                           </expression>)</typeConversion>
                                                                     </expression>,<expression>
                                                                        <primaryExpression>
                                                                           <identifier>ethBalance</identifier>
                                                                        </primaryExpression>
                                                                     </expression>)</tupleExpression>
                                                               </callArguments>
                                                            </functionCall>
                                                         </expression>
                                                      </expressionStatement>;</statement>}</block>
                                             </statement>
                                          </ifStatement>
                                       </statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>tradeTokenBalance</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>ERC20</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>tradeTokenAddress</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>balanceOf</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>address</elementaryTypeName>
                                          </typeName>(<expression>
                                             <environmentalVariable>this</environmentalVariable>
                                          </expression>)</typeConversion>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>loanTokenBalance</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>ERC20</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>loanTokenAddress</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>balanceOf</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>address</elementaryTypeName>
                                          </typeName>(<expression>
                                             <environmentalVariable>this</environmentalVariable>
                                          </expression>)</typeConversion>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>depositAmount</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>==</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>loanTokenBalance</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>!=</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <tupleExpression>(<expression>
                                                         <variableDeclaration>
                                                            <typeName>
                                                               <elementaryTypeName>uint256</elementaryTypeName>
                                                            </typeName>
                                                            <identifier>destTokenAmountReceived</identifier>
                                                         </variableDeclaration>
                                                      </expression>,)</tupleExpression>
                                                </expression>=<expression>
                                                   <functionCall>
                                                      <functionName>
                                                         <identifier>_tradeUserAsset</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>loanTokenAddress</identifier>
                                                               </primaryExpression>
                                                            </expression>,<expression>
                                                               <primaryExpression>
                                                                  <identifier>tradeTokenAddress</identifier>
                                                               </primaryExpression>
                                                            </expression>,<expression>
                                                               <typeConversion>
                                                                  <typeName>
                                                                     <elementaryTypeName>address</elementaryTypeName>
                                                                  </typeName>(<expression>
                                                                     <environmentalVariable>this</environmentalVariable>
                                                                  </expression>)</typeConversion>
                                                            </expression>,<expression>
                                                               <primaryExpression>
                                                                  <identifier>loanTokenBalance</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>tradeTokenBalance</identifier>
                                                   </primaryExpression>
                                                </expression>=<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>tradeTokenBalance</identifier>
                                                      </primaryExpression>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>add</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>destTokenAmountReceived</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>tradeTokenBalance</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>!=</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <variableDeclaration>
                                                      <typeName>
                                                         <elementaryTypeName>uint256</elementaryTypeName>
                                                      </typeName>
                                                      <identifier>tempAllowance</identifier>
                                                   </variableDeclaration>
                                                </expression>=<expression>
                                                   <expression>
                                                      <functionCall>
                                                         <functionName>
                                                            <identifier>ERC20</identifier>
                                                         </functionName>
                                                         <callArguments>
                                                            <tupleExpression>(<expression>
                                                                  <primaryExpression>
                                                                     <identifier>tradeTokenAddress</identifier>
                                                                  </primaryExpression>
                                                               </expression>)</tupleExpression>
                                                         </callArguments>
                                                      </functionCall>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>allowance</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <typeConversion>
                                                                  <typeName>
                                                                     <elementaryTypeName>address</elementaryTypeName>
                                                                  </typeName>(<expression>
                                                                     <environmentalVariable>this</environmentalVariable>
                                                                  </expression>)</typeConversion>
                                                            </expression>,<expression>
                                                               <primaryExpression>
                                                                  <identifier>bZxVault</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <ifStatement>if(<condition>
                                                <expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>tempAllowance</identifier>
                                                      </primaryExpression>
                                                   </expression>&lt;<expression>
                                                      <primaryExpression>
                                                         <identifier>tradeTokenBalance</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>
                                             </condition>)<statement>
                                                <block>{<statement>
                                                      <ifStatement>if(<condition>
                                                            <expression>
                                                               <expression>
                                                                  <primaryExpression>
                                                                     <identifier>tempAllowance</identifier>
                                                                  </primaryExpression>
                                                               </expression>
                                                               <comparison>!=</comparison>
                                                               <expression>
                                                                  <primaryExpression>
                                                                     <numberLiteral>
                                                                        <decimalNumber>0</decimalNumber>
                                                                     </numberLiteral>
                                                                  </primaryExpression>
                                                               </expression>
                                                            </expression>
                                                         </condition>)<statement>
                                                            <block>{<statement>
                                                                  <expressionStatement>
                                                                     <expression>
                                                                        <functionCall>
                                                                           <functionName>
                                                                              <identifier>require</identifier>
                                                                           </functionName>
                                                                           <callArguments>
                                                                              <tupleExpression>(<expression>
                                                                                    <expression>
                                                                                       <functionCall>
                                                                                          <functionName>
                                                                                             <identifier>ERC20</identifier>
                                                                                          </functionName>
                                                                                          <callArguments>
                                                                                             <tupleExpression>(<expression>
                                                                                                   <primaryExpression>
                                                                                                      <identifier>tradeTokenAddress</identifier>
                                                                                                   </primaryExpression>
                                                                                                </expression>)</tupleExpression>
                                                                                          </callArguments>
                                                                                       </functionCall>
                                                                                    </expression>.<functionCall>
                                                                                       <functionName>
                                                                                          <identifier>approve</identifier>
                                                                                       </functionName>
                                                                                       <callArguments>
                                                                                          <tupleExpression>(<expression>
                                                                                                <primaryExpression>
                                                                                                   <identifier>bZxVault</identifier>
                                                                                                </primaryExpression>
                                                                                             </expression>,<expression>
                                                                                                <primaryExpression>
                                                                                                   <numberLiteral>
                                                                                                      <decimalNumber>0</decimalNumber>
                                                                                                   </numberLiteral>
                                                                                                </primaryExpression>
                                                                                             </expression>)</tupleExpression>
                                                                                       </callArguments>
                                                                                    </functionCall>
                                                                                 </expression>,<expression>
                                                                                    <primaryExpression>
                                                                                       <stringLiteral>token approval reset failed</stringLiteral>
                                                                                    </primaryExpression>
                                                                                 </expression>)</tupleExpression>
                                                                           </callArguments>
                                                                        </functionCall>
                                                                     </expression>
                                                                  </expressionStatement>;</statement>}</block>
                                                         </statement>
                                                      </ifStatement>
                                                   </statement>
                                                   <statement>
                                                      <expressionStatement>
                                                         <expression>
                                                            <functionCall>
                                                               <functionName>
                                                                  <identifier>require</identifier>
                                                               </functionName>
                                                               <callArguments>
                                                                  <tupleExpression>(<expression>
                                                                        <expression>
                                                                           <functionCall>
                                                                              <functionName>
                                                                                 <identifier>ERC20</identifier>
                                                                              </functionName>
                                                                              <callArguments>
                                                                                 <tupleExpression>(<expression>
                                                                                       <primaryExpression>
                                                                                          <identifier>tradeTokenAddress</identifier>
                                                                                       </primaryExpression>
                                                                                    </expression>)</tupleExpression>
                                                                              </callArguments>
                                                                           </functionCall>
                                                                        </expression>.<functionCall>
                                                                           <functionName>
                                                                              <identifier>approve</identifier>
                                                                           </functionName>
                                                                           <callArguments>
                                                                              <tupleExpression>(<expression>
                                                                                    <primaryExpression>
                                                                                       <identifier>bZxVault</identifier>
                                                                                    </primaryExpression>
                                                                                 </expression>,<expression>
                                                                                    <primaryExpression>
                                                                                       <identifier>MAX_UINT</identifier>
                                                                                    </primaryExpression>
                                                                                 </expression>)</tupleExpression>
                                                                           </callArguments>
                                                                        </functionCall>
                                                                     </expression>,<expression>
                                                                        <primaryExpression>
                                                                           <stringLiteral>token approval failed</stringLiteral>
                                                                        </primaryExpression>
                                                                     </expression>)</tupleExpression>
                                                               </callArguments>
                                                            </functionCall>
                                                         </expression>
                                                      </expressionStatement>;</statement>}</block>
                                             </statement>
                                          </ifStatement>
                                       </statement>
                                       <statement>
                                          <returnStatement>return<expression>
                                                <expression>
                                                   <functionCall>
                                                      <functionName>
                                                         <identifier>IBZx</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>bZxContract</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>.<functionCall>
                                                   <functionName>
                                                      <identifier>depositCollateral</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <primaryExpression>
                                                               <identifier>loanOrderHash</identifier>
                                                            </primaryExpression>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <identifier>tradeTokenAddress</identifier>
                                                            </primaryExpression>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <identifier>tradeTokenBalance</identifier>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>
                                          </returnStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>tradeTokenBalance</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>!=</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <variableDeclaration>
                                                      <typeName>
                                                         <elementaryTypeName>uint256</elementaryTypeName>
                                                      </typeName>
                                                      <identifier>tempAllowance</identifier>
                                                   </variableDeclaration>
                                                </expression>=<expression>
                                                   <expression>
                                                      <functionCall>
                                                         <functionName>
                                                            <identifier>ERC20</identifier>
                                                         </functionName>
                                                         <callArguments>
                                                            <tupleExpression>(<expression>
                                                                  <primaryExpression>
                                                                     <identifier>tradeTokenAddress</identifier>
                                                                  </primaryExpression>
                                                               </expression>)</tupleExpression>
                                                         </callArguments>
                                                      </functionCall>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>allowance</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <typeConversion>
                                                                  <typeName>
                                                                     <elementaryTypeName>address</elementaryTypeName>
                                                                  </typeName>(<expression>
                                                                     <environmentalVariable>this</environmentalVariable>
                                                                  </expression>)</typeConversion>
                                                            </expression>,<expression>
                                                               <primaryExpression>
                                                                  <identifier>loanTokenLender</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <ifStatement>if(<condition>
                                                <expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>tempAllowance</identifier>
                                                      </primaryExpression>
                                                   </expression>&lt;<expression>
                                                      <primaryExpression>
                                                         <identifier>tradeTokenBalance</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>
                                             </condition>)<statement>
                                                <block>{<statement>
                                                      <ifStatement>if(<condition>
                                                            <expression>
                                                               <expression>
                                                                  <primaryExpression>
                                                                     <identifier>tempAllowance</identifier>
                                                                  </primaryExpression>
                                                               </expression>
                                                               <comparison>!=</comparison>
                                                               <expression>
                                                                  <primaryExpression>
                                                                     <numberLiteral>
                                                                        <decimalNumber>0</decimalNumber>
                                                                     </numberLiteral>
                                                                  </primaryExpression>
                                                               </expression>
                                                            </expression>
                                                         </condition>)<statement>
                                                            <block>{<statement>
                                                                  <expressionStatement>
                                                                     <expression>
                                                                        <functionCall>
                                                                           <functionName>
                                                                              <identifier>require</identifier>
                                                                           </functionName>
                                                                           <callArguments>
                                                                              <tupleExpression>(<expression>
                                                                                    <expression>
                                                                                       <functionCall>
                                                                                          <functionName>
                                                                                             <identifier>ERC20</identifier>
                                                                                          </functionName>
                                                                                          <callArguments>
                                                                                             <tupleExpression>(<expression>
                                                                                                   <primaryExpression>
                                                                                                      <identifier>tradeTokenAddress</identifier>
                                                                                                   </primaryExpression>
                                                                                                </expression>)</tupleExpression>
                                                                                          </callArguments>
                                                                                       </functionCall>
                                                                                    </expression>.<functionCall>
                                                                                       <functionName>
                                                                                          <identifier>approve</identifier>
                                                                                       </functionName>
                                                                                       <callArguments>
                                                                                          <tupleExpression>(<expression>
                                                                                                <primaryExpression>
                                                                                                   <identifier>loanTokenLender</identifier>
                                                                                                </primaryExpression>
                                                                                             </expression>,<expression>
                                                                                                <primaryExpression>
                                                                                                   <numberLiteral>
                                                                                                      <decimalNumber>0</decimalNumber>
                                                                                                   </numberLiteral>
                                                                                                </primaryExpression>
                                                                                             </expression>)</tupleExpression>
                                                                                       </callArguments>
                                                                                    </functionCall>
                                                                                 </expression>,<expression>
                                                                                    <primaryExpression>
                                                                                       <stringLiteral>token approval reset failed</stringLiteral>
                                                                                    </primaryExpression>
                                                                                 </expression>)</tupleExpression>
                                                                           </callArguments>
                                                                        </functionCall>
                                                                     </expression>
                                                                  </expressionStatement>;</statement>}</block>
                                                         </statement>
                                                      </ifStatement>
                                                   </statement>
                                                   <statement>
                                                      <expressionStatement>
                                                         <expression>
                                                            <functionCall>
                                                               <functionName>
                                                                  <identifier>require</identifier>
                                                               </functionName>
                                                               <callArguments>
                                                                  <tupleExpression>(<expression>
                                                                        <expression>
                                                                           <functionCall>
                                                                              <functionName>
                                                                                 <identifier>ERC20</identifier>
                                                                              </functionName>
                                                                              <callArguments>
                                                                                 <tupleExpression>(<expression>
                                                                                       <primaryExpression>
                                                                                          <identifier>tradeTokenAddress</identifier>
                                                                                       </primaryExpression>
                                                                                    </expression>)</tupleExpression>
                                                                              </callArguments>
                                                                           </functionCall>
                                                                        </expression>.<functionCall>
                                                                           <functionName>
                                                                              <identifier>approve</identifier>
                                                                           </functionName>
                                                                           <callArguments>
                                                                              <tupleExpression>(<expression>
                                                                                    <primaryExpression>
                                                                                       <identifier>loanTokenLender</identifier>
                                                                                    </primaryExpression>
                                                                                 </expression>,<expression>
                                                                                    <primaryExpression>
                                                                                       <identifier>MAX_UINT</identifier>
                                                                                    </primaryExpression>
                                                                                 </expression>)</tupleExpression>
                                                                           </callArguments>
                                                                        </functionCall>
                                                                     </expression>,<expression>
                                                                        <primaryExpression>
                                                                           <stringLiteral>token approval failed</stringLiteral>
                                                                        </primaryExpression>
                                                                     </expression>)</tupleExpression>
                                                               </callArguments>
                                                            </functionCall>
                                                         </expression>
                                                      </expressionStatement>;</statement>}</block>
                                             </statement>
                                          </ifStatement>
                                       </statement>
                                       <statement>
                                          <ifStatement>if(<condition>
                                                <expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>depositAmount</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                   <comparison>==</comparison>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>MAX_UINT</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>
                                             </condition>)<statement>
                                                <block>{<statement>
                                                      <expressionStatement>
                                                         <expression>
                                                            <expression>
                                                               <primaryExpression>
                                                                  <identifier>depositAmount</identifier>
                                                               </primaryExpression>
                                                            </expression>=<expression>
                                                               <primaryExpression>
                                                                  <identifier>tradeTokenBalance</identifier>
                                                               </primaryExpression>
                                                            </expression>
                                                         </expression>
                                                      </expressionStatement>;</statement>
                                                   <statement>
                                                      <expressionStatement>
                                                         <expression>
                                                            <expression>
                                                               <primaryExpression>
                                                                  <identifier>depositTokenAddress</identifier>
                                                               </primaryExpression>
                                                            </expression>=<expression>
                                                               <primaryExpression>
                                                                  <identifier>tradeTokenAddress</identifier>
                                                               </primaryExpression>
                                                            </expression>
                                                         </expression>
                                                      </expressionStatement>;</statement>}</block>
                                             </statement>
                                          </ifStatement>
                                       </statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>loanTokenBalance</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>!=</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <variableDeclaration>
                                                      <typeName>
                                                         <elementaryTypeName>uint256</elementaryTypeName>
                                                      </typeName>
                                                      <identifier>tempAllowance</identifier>
                                                   </variableDeclaration>
                                                </expression>=<expression>
                                                   <expression>
                                                      <functionCall>
                                                         <functionName>
                                                            <identifier>ERC20</identifier>
                                                         </functionName>
                                                         <callArguments>
                                                            <tupleExpression>(<expression>
                                                                  <primaryExpression>
                                                                     <identifier>loanTokenAddress</identifier>
                                                                  </primaryExpression>
                                                               </expression>)</tupleExpression>
                                                         </callArguments>
                                                      </functionCall>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>allowance</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <typeConversion>
                                                                  <typeName>
                                                                     <elementaryTypeName>address</elementaryTypeName>
                                                                  </typeName>(<expression>
                                                                     <environmentalVariable>this</environmentalVariable>
                                                                  </expression>)</typeConversion>
                                                            </expression>,<expression>
                                                               <primaryExpression>
                                                                  <identifier>loanTokenLender</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <ifStatement>if(<condition>
                                                <expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>tempAllowance</identifier>
                                                      </primaryExpression>
                                                   </expression>&lt;<expression>
                                                      <primaryExpression>
                                                         <identifier>loanTokenBalance</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>
                                             </condition>)<statement>
                                                <block>{<statement>
                                                      <ifStatement>if(<condition>
                                                            <expression>
                                                               <expression>
                                                                  <primaryExpression>
                                                                     <identifier>tempAllowance</identifier>
                                                                  </primaryExpression>
                                                               </expression>
                                                               <comparison>!=</comparison>
                                                               <expression>
                                                                  <primaryExpression>
                                                                     <numberLiteral>
                                                                        <decimalNumber>0</decimalNumber>
                                                                     </numberLiteral>
                                                                  </primaryExpression>
                                                               </expression>
                                                            </expression>
                                                         </condition>)<statement>
                                                            <block>{<statement>
                                                                  <expressionStatement>
                                                                     <expression>
                                                                        <functionCall>
                                                                           <functionName>
                                                                              <identifier>require</identifier>
                                                                           </functionName>
                                                                           <callArguments>
                                                                              <tupleExpression>(<expression>
                                                                                    <expression>
                                                                                       <functionCall>
                                                                                          <functionName>
                                                                                             <identifier>ERC20</identifier>
                                                                                          </functionName>
                                                                                          <callArguments>
                                                                                             <tupleExpression>(<expression>
                                                                                                   <primaryExpression>
                                                                                                      <identifier>loanTokenAddress</identifier>
                                                                                                   </primaryExpression>
                                                                                                </expression>)</tupleExpression>
                                                                                          </callArguments>
                                                                                       </functionCall>
                                                                                    </expression>.<functionCall>
                                                                                       <functionName>
                                                                                          <identifier>approve</identifier>
                                                                                       </functionName>
                                                                                       <callArguments>
                                                                                          <tupleExpression>(<expression>
                                                                                                <primaryExpression>
                                                                                                   <identifier>loanTokenLender</identifier>
                                                                                                </primaryExpression>
                                                                                             </expression>,<expression>
                                                                                                <primaryExpression>
                                                                                                   <numberLiteral>
                                                                                                      <decimalNumber>0</decimalNumber>
                                                                                                   </numberLiteral>
                                                                                                </primaryExpression>
                                                                                             </expression>)</tupleExpression>
                                                                                       </callArguments>
                                                                                    </functionCall>
                                                                                 </expression>,<expression>
                                                                                    <primaryExpression>
                                                                                       <stringLiteral>token approval reset failed</stringLiteral>
                                                                                    </primaryExpression>
                                                                                 </expression>)</tupleExpression>
                                                                           </callArguments>
                                                                        </functionCall>
                                                                     </expression>
                                                                  </expressionStatement>;</statement>}</block>
                                                         </statement>
                                                      </ifStatement>
                                                   </statement>
                                                   <statement>
                                                      <expressionStatement>
                                                         <expression>
                                                            <functionCall>
                                                               <functionName>
                                                                  <identifier>require</identifier>
                                                               </functionName>
                                                               <callArguments>
                                                                  <tupleExpression>(<expression>
                                                                        <expression>
                                                                           <functionCall>
                                                                              <functionName>
                                                                                 <identifier>ERC20</identifier>
                                                                              </functionName>
                                                                              <callArguments>
                                                                                 <tupleExpression>(<expression>
                                                                                       <primaryExpression>
                                                                                          <identifier>loanTokenAddress</identifier>
                                                                                       </primaryExpression>
                                                                                    </expression>)</tupleExpression>
                                                                              </callArguments>
                                                                           </functionCall>
                                                                        </expression>.<functionCall>
                                                                           <functionName>
                                                                              <identifier>approve</identifier>
                                                                           </functionName>
                                                                           <callArguments>
                                                                              <tupleExpression>(<expression>
                                                                                    <primaryExpression>
                                                                                       <identifier>loanTokenLender</identifier>
                                                                                    </primaryExpression>
                                                                                 </expression>,<expression>
                                                                                    <primaryExpression>
                                                                                       <identifier>MAX_UINT</identifier>
                                                                                    </primaryExpression>
                                                                                 </expression>)</tupleExpression>
                                                                           </callArguments>
                                                                        </functionCall>
                                                                     </expression>,<expression>
                                                                        <primaryExpression>
                                                                           <stringLiteral>token approval failed</stringLiteral>
                                                                        </primaryExpression>
                                                                     </expression>)</tupleExpression>
                                                               </callArguments>
                                                            </functionCall>
                                                         </expression>
                                                      </expressionStatement>;</statement>}</block>
                                             </statement>
                                          </ifStatement>
                                       </statement>
                                       <statement>
                                          <ifStatement>if(<condition>
                                                <expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>depositAmount</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                   <comparison>==</comparison>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>MAX_UINT</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>
                                             </condition>)<statement>
                                                <block>{<statement>
                                                      <expressionStatement>
                                                         <expression>
                                                            <expression>
                                                               <primaryExpression>
                                                                  <identifier>depositAmount</identifier>
                                                               </primaryExpression>
                                                            </expression>=<expression>
                                                               <primaryExpression>
                                                                  <identifier>loanTokenBalance</identifier>
                                                               </primaryExpression>
                                                            </expression>
                                                         </expression>
                                                      </expressionStatement>;</statement>
                                                   <statement>
                                                      <expressionStatement>
                                                         <expression>
                                                            <expression>
                                                               <primaryExpression>
                                                                  <identifier>depositTokenAddress</identifier>
                                                               </primaryExpression>
                                                            </expression>=<expression>
                                                               <primaryExpression>
                                                                  <identifier>loanTokenAddress</identifier>
                                                               </primaryExpression>
                                                            </expression>
                                                         </expression>
                                                      </expressionStatement>;</statement>}</block>
                                             </statement>
                                          </ifStatement>
                                       </statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>
                           <statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>loanTokenBalance</identifier>
                                             </primaryExpression>
                                          </expression>
                                          <comparison>!=</comparison>
                                          <expression>
                                             <primaryExpression>
                                                <numberLiteral>
                                                   <decimalNumber>0</decimalNumber>
                                                </numberLiteral>
                                             </primaryExpression>
                                          </expression>
                                       </expression>||<expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>tradeTokenBalance</identifier>
                                             </primaryExpression>
                                          </expression>
                                          <comparison>!=</comparison>
                                          <expression>
                                             <primaryExpression>
                                                <numberLiteral>
                                                   <decimalNumber>0</decimalNumber>
                                                </numberLiteral>
                                             </primaryExpression>
                                          </expression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <expression>
                                                   <functionCall>
                                                      <functionName>
                                                         <identifier>ILoanToken</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>loanTokenLender</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>.<functionCall>
                                                   <functionName>
                                                      <identifier>marginTradeFromDeposit</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <primaryExpression>
                                                               <identifier>depositAmount</identifier>
                                                            </primaryExpression>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <identifier>leverageAmount</identifier>
                                                            </primaryExpression>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <identifier>loanTokenBalance</identifier>
                                                            </primaryExpression>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <identifier>tradeTokenBalance</identifier>
                                                            </primaryExpression>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <numberLiteral>
                                                                  <decimalNumber>0</decimalNumber>
                                                               </numberLiteral>
                                                            </primaryExpression>
                                                         </expression>,<expression>
                                                            <typeConversion>
                                                               <typeName>
                                                                  <elementaryTypeName>address</elementaryTypeName>
                                                               </typeName>(<expression>
                                                                  <environmentalVariable>this</environmentalVariable>
                                                               </expression>)</typeConversion>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <identifier>depositTokenAddress</identifier>
                                                            </primaryExpression>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <identifier>tradeTokenAddress</identifier>
                                                            </primaryExpression>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <identifier>tradeTokenAddress</identifier>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>
                                          </expressionStatement>;</statement>
                                       <statement>
                                          <returnStatement>return<expression>
                                                <primaryExpression>
                                                   <booleanLiteral>true</booleanLiteral>
                                                </primaryExpression>
                                             </expression>
                                          </returnStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>false</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>_tokenPrice</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>netCollateralAmount</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>interestDepositRemaining</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint256</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>totalSupply_</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>?<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>normalize</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <expression>
                                             <expression>
                                                <expression>
                                                   <expression>
                                                      <functionCall>
                                                         <functionName>
                                                            <identifier>ERC20</identifier>
                                                         </functionName>
                                                         <callArguments>
                                                            <tupleExpression>(<expression>
                                                                  <primaryExpression>
                                                                     <identifier>tradeTokenAddress</identifier>
                                                                  </primaryExpression>
                                                               </expression>)</tupleExpression>
                                                         </callArguments>
                                                      </functionCall>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>balanceOf</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <typeConversion>
                                                                  <typeName>
                                                                     <elementaryTypeName>address</elementaryTypeName>
                                                                  </typeName>(<expression>
                                                                     <environmentalVariable>this</environmentalVariable>
                                                                  </expression>)</typeConversion>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>.<functionCall>
                                                   <functionName>
                                                      <identifier>add</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <primaryExpression>
                                                               <identifier>netCollateralAmount</identifier>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>.<functionCall>
                                                <functionName>
                                                   <identifier>add</identifier>
                                                </functionName>
                                                <callArguments>
                                                   <tupleExpression>(<expression>
                                                         <primaryExpression>
                                                            <identifier>interestDepositRemaining</identifier>
                                                         </primaryExpression>
                                                      </expression>)</tupleExpression>
                                                </callArguments>
                                             </functionCall>
                                          </expression>.<functionCall>
                                             <functionName>
                                                <identifier>mul</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>tradeTokenAdjustment</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>div</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>totalSupply_</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>:<expression>
                           <primaryExpression>
                              <identifier>initialPrice</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>setLoanTokenLender</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_lender</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>loanTokenLender</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_lender</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>setBZxContract</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_addr</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>bZxContract</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_addr</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>setBZxVault</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_addr</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>bZxVault</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_addr</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>setBZxOracle</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_addr</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>bZxOracle</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_addr</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>setInitialPrice</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_value</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <comparison>!=</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>value can't be 0</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>initialPrice</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_value</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>setSplitValue</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_value</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <comparison>!=</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>value can't be 0</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>splitFactor</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_value</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>handleSplit</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <block>{<statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>totalSupply</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>()</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>splitFactor</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>splitFactor</identifier>
                                             </primaryExpression>
                                          </expression>.<functionCall>
                                             <functionName>
                                                <identifier>mul</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <identifier>initialPrice</identifier>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>div</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <functionCall>
                                                      <functionName>
                                                         <identifier>tokenPrice</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>()</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>splitFactor</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>10</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                       <powerOperator>**</powerOperator>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>18</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>depositCollateralToLoan</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>depositTokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>depositAmount</identifier>
               </parameter>)</parameterList>
            <visibleType>external</visibleType>
            <identifier>nonReentrant</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>ERC20</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>depositTokenAddress</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>.<functionCall>
                                       <functionName>
                                          <identifier>transferFrom</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <environmentalVariable>msg.sender</environmentalVariable>
                                             </expression>,<expression>
                                                <typeConversion>
                                                   <typeName>
                                                      <elementaryTypeName>address</elementaryTypeName>
                                                   </typeName>(<expression>
                                                      <environmentalVariable>this</environmentalVariable>
                                                   </expression>)</typeConversion>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <identifier>depositAmount</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>transfer of token failed</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>
                              <identifier>tempAllowance</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <functionCall>
                                 <functionName>
                                    <identifier>ERC20</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>depositTokenAddress</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>allowance</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>address</elementaryTypeName>
                                          </typeName>(<expression>
                                             <environmentalVariable>this</environmentalVariable>
                                          </expression>)</typeConversion>
                                    </expression>,<expression>
                                       <primaryExpression>
                                          <identifier>bZxVault</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>tempAllowance</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>depositAmount</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <ifStatement>if(<condition>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>tempAllowance</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>!=</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </condition>)<statement>
                                    <block>{<statement>
                                          <expressionStatement>
                                             <expression>
                                                <functionCall>
                                                   <functionName>
                                                      <identifier>require</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <expression>
                                                               <functionCall>
                                                                  <functionName>
                                                                     <identifier>ERC20</identifier>
                                                                  </functionName>
                                                                  <callArguments>
                                                                     <tupleExpression>(<expression>
                                                                           <primaryExpression>
                                                                              <identifier>depositTokenAddress</identifier>
                                                                           </primaryExpression>
                                                                        </expression>)</tupleExpression>
                                                                  </callArguments>
                                                               </functionCall>
                                                            </expression>.<functionCall>
                                                               <functionName>
                                                                  <identifier>approve</identifier>
                                                               </functionName>
                                                               <callArguments>
                                                                  <tupleExpression>(<expression>
                                                                        <primaryExpression>
                                                                           <identifier>bZxVault</identifier>
                                                                        </primaryExpression>
                                                                     </expression>,<expression>
                                                                        <primaryExpression>
                                                                           <numberLiteral>
                                                                              <decimalNumber>0</decimalNumber>
                                                                           </numberLiteral>
                                                                        </primaryExpression>
                                                                     </expression>)</tupleExpression>
                                                               </callArguments>
                                                            </functionCall>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <stringLiteral>token approval reset failed</stringLiteral>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>
                                          </expressionStatement>;</statement>}</block>
                                 </statement>
                              </ifStatement>
                           </statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>require</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <expression>
                                                   <functionCall>
                                                      <functionName>
                                                         <identifier>ERC20</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>depositTokenAddress</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>.<functionCall>
                                                   <functionName>
                                                      <identifier>approve</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <primaryExpression>
                                                               <identifier>bZxVault</identifier>
                                                            </primaryExpression>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <identifier>MAX_UINT</identifier>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <stringLiteral>token approval failed</stringLiteral>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <functionCall>
                                          <functionName>
                                             <identifier>IBZx</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>bZxContract</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>.<functionCall>
                                       <functionName>
                                          <identifier>depositCollateral</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <identifier>loanOrderHash</identifier>
                                                </primaryExpression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <identifier>depositTokenAddress</identifier>
                                                </primaryExpression>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <identifier>depositAmount</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>deposit failed</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>triggerPosition</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>bool</elementaryTypeName>
                  </typeName>
                  <identifier>openPosition</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>totalSupply_</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <comparison>!=</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>no supply</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <primaryExpression>
                              <identifier>openPosition</identifier>
                           </primaryExpression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>_triggerPosition</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <typeConversion>
                                                   <typeName>
                                                      <elementaryTypeName>address</elementaryTypeName>
                                                   </typeName>(<expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>0</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>)</typeConversion>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <identifier>MAX_UINT</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>_triggerPosition</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <typeConversion>
                                                   <typeName>
                                                      <elementaryTypeName>address</elementaryTypeName>
                                                   </typeName>(<expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>0</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>)</typeConversion>
                                             </expression>,<expression>
                                                <primaryExpression>
                                                   <numberLiteral>
                                                      <decimalNumber>0</decimalNumber>
                                                   </numberLiteral>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>initialize</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <typeName>
                        <elementaryTypeName>address</elementaryTypeName>
                     </typeName>[<expression>
                        <primaryExpression>
                           <numberLiteral>
                              <decimalNumber>7</decimalNumber>
                           </numberLiteral>
                        </primaryExpression>
                     </expression>]</typeName>
                  <storageLocation>memory</storageLocation>
                  <identifier>addresses</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>bool</elementaryTypeName>
                  </typeName>
                  <identifier>_shortPosition</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_leverageAmount</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>
                  <identifier>_loanOrderHash</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>string</elementaryTypeName>
                  </typeName>
                  <storageLocation>memory</storageLocation>
                  <identifier>_name</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>string</elementaryTypeName>
                  </typeName>
                  <storageLocation>memory</storageLocation>
                  <identifier>_symbol</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>!<expression>
                                       <primaryExpression>
                                          <identifier>isInitialized_</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>already initialized</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>bZxContract</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>addresses</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>]</expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>bZxVault</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>addresses</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>1</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>]</expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>bZxOracle</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>addresses</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>2</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>]</expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>wethContract</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>addresses</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>3</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>]</expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>loanTokenAddress</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>addresses</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>4</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>]</expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>tradeTokenAddress</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>addresses</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>5</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>]</expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>loanTokenLender</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>addresses</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>6</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>]</expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>shortPosition</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_shortPosition</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>loanOrderHash</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_loanOrderHash</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>leverageAmount</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_leverageAmount</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>name</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_name</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>symbol</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_symbol</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>decimals</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <numberLiteral>
                                 <decimalNumber>18</decimalNumber>
                              </numberLiteral>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>loanTokenDecimals</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <typeConversion>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>(<expression>
                                 <expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>EIP20</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <identifier>loanTokenAddress</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>.<functionCall>
                                    <functionName>
                                       <identifier>decimals</identifier>
                                    </functionName>
                                    <callArguments>
                                       <tupleExpression>()</tupleExpression>
                                    </callArguments>
                                 </functionCall>
                              </expression>)</typeConversion>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>loanTokenAdjustment</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>SafeMath</identifier>
                              </primaryExpression>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>mul</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>10</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                       <powerOperator>**</powerOperator>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>18</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>,<expression>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>10</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                       <powerOperator>**</powerOperator>
                                       <expression>
                                          <tupleExpression>(<expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>SafeMath</identifier>
                                                   </primaryExpression>
                                                </expression>.<functionCall>
                                                   <functionName>
                                                      <identifier>sub</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <primaryExpression>
                                                               <numberLiteral>
                                                                  <decimalNumber>18</decimalNumber>
                                                               </numberLiteral>
                                                            </primaryExpression>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <identifier>loanTokenDecimals</identifier>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>)</tupleExpression>
                                       </expression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>tradeTokenDecimals</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <typeConversion>
                              <typeName>
                                 <elementaryTypeName>uint256</elementaryTypeName>
                              </typeName>(<expression>
                                 <expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>EIP20</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <primaryExpression>
                                                   <identifier>tradeTokenAddress</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>.<functionCall>
                                    <functionName>
                                       <identifier>decimals</identifier>
                                    </functionName>
                                    <callArguments>
                                       <tupleExpression>()</tupleExpression>
                                    </callArguments>
                                 </functionCall>
                              </expression>)</typeConversion>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>tradeTokenAdjustment</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>SafeMath</identifier>
                              </primaryExpression>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>mul</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>10</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                       <powerOperator>**</powerOperator>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>18</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>,<expression>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>10</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                       <powerOperator>**</powerOperator>
                                       <expression>
                                          <tupleExpression>(<expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>SafeMath</identifier>
                                                   </primaryExpression>
                                                </expression>.<functionCall>
                                                   <functionName>
                                                      <identifier>sub</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <primaryExpression>
                                                               <numberLiteral>
                                                                  <decimalNumber>18</decimalNumber>
                                                               </numberLiteral>
                                                            </primaryExpression>
                                                         </expression>,<expression>
                                                            <primaryExpression>
                                                               <identifier>tradeTokenDecimals</identifier>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>)</tupleExpression>
                                       </expression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>initialPrice</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>10</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                           <powerOperator>**</powerOperator>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>21</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>isInitialized_</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <booleanLiteral>true</booleanLiteral>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</contractDefinition>&lt;EOF&gt;</sourceUnit>