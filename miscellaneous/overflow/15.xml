<?xml version="1.0" encoding="UTF-8"?>
<sourceUnit>
   <pragmaDirective>pragma<pragmaSolidity>solidity<version>
            <versionLiteral>0.5.9</versionLiteral>
         </version>
      </pragmaSolidity>;</pragmaDirective>
   <libraryDefinition>library<identifier>SafeMath</identifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>add</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                     <identifier>c</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>c</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>a</identifier>
                              </primaryExpression>
                           </expression>
                           <plusminusOperator>
                              <plusOperator>+</plusOperator>
                           </plusminusOperator>
                           <expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>c</identifier>
                                       </primaryExpression>
                                    </expression>&gt;=<expression>
                                       <primaryExpression>
                                          <identifier>a</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>sub</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                     <identifier>c</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>b</identifier>
                                       </primaryExpression>
                                    </expression>&lt;=<expression>
                                       <primaryExpression>
                                          <identifier>a</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>c</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>a</identifier>
                              </primaryExpression>
                           </expression>
                           <plusminusOperator>
                              <minusOperator>-</minusOperator>
                           </plusminusOperator>
                           <expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>mul</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                     <identifier>c</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>c</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>a</identifier>
                              </primaryExpression>
                           </expression>
                           <muldivOperator>
                              <mulOperator>*</mulOperator>
                           </muldivOperator>
                           <expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>a</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>==</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>||<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>c</identifier>
                                             </primaryExpression>
                                          </expression>
                                          <muldivOperator>
                                             <divOperator>/</divOperator>
                                          </muldivOperator>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>a</identifier>
                                             </primaryExpression>
                                          </expression>
                                       </expression>
                                       <comparison>==</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>b</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>div</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                     <identifier>c</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>b</identifier>
                                       </primaryExpression>
                                    </expression>&gt;<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>c</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>a</identifier>
                              </primaryExpression>
                           </expression>
                           <muldivOperator>
                              <divOperator>/</divOperator>
                           </muldivOperator>
                           <expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</libraryDefinition>
   <libraryDefinition>library<identifier>ExtendedMath</identifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>limitLessThan</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <visibleType>internal</visibleType>
            <stateMutability>
               <pureType>pure</pureType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                     <identifier>c</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>a</identifier>
                              </primaryExpression>
                           </expression>&gt;<expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <returnStatement>return<expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                        </returnStatement>;</statement>
                  </ifStatement>
               </statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <identifier>a</identifier>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</libraryDefinition>
   <contractDefinition>contract<identifier>ERC20Interface</identifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>totalSupply</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>balanceOf</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>tokenOwner</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                     <identifier>balance</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>allowance</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>tokenOwner</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>spender</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                     <identifier>remaining</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transfer</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>tokens</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                     <identifier>success</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>approve</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>spender</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>tokens</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                     <identifier>success</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transferFrom</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>from</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>tokens</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                     <identifier>success</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>;</functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <eventDefinition>event<identifier>Transfer</identifier>
            <indexedParameterList>(<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>from</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>to</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>tokens</identifier>
               </indexedParameter>)</indexedParameterList>;</eventDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <eventDefinition>event<identifier>Approval</identifier>
            <indexedParameterList>(<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>tokenOwner</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>spender</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>tokens</identifier>
               </indexedParameter>)</indexedParameterList>;</eventDefinition>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>ApproveAndCallFallBack</identifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>receiveApproval</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>from</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>tokens</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>token</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>bytes</elementaryTypeName>
                  </typeName>
                  <storageLocation>memory</storageLocation>
                  <identifier>data</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>;</functionDefinition>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>Owned</identifier>{<contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>address</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>owner</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>address</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>newOwner</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <eventDefinition>event<identifier>OwnershipTransferred</identifier>
            <indexedParameterList>(<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>_from</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>_to</identifier>
               </indexedParameter>)</indexedParameterList>;</eventDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>constructor<parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>owner</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <environmentalVariable>msg.sender</environmentalVariable>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <modifierDefinition>modifier<identifier>onlyOwner</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <environmentalVariable>msg.sender</environmentalVariable>
                                    </expression>
                                    <comparison>==</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>owner</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <placeholderStatement>_</placeholderStatement>;</statement>}</block>
         </modifierDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transferOwnership</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>_newOwner</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>newOwner</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_newOwner</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>acceptOwnership</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <environmentalVariable>msg.sender</environmentalVariable>
                                    </expression>
                                    <comparison>==</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>newOwner</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>OwnershipTransferred</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <primaryExpression>
                                 <identifier>owner</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>newOwner</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>owner</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>newOwner</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>newOwner</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <typeConversion>
                              <typeName>
                                 <elementaryTypeName>address</elementaryTypeName>
                              </typeName>(<expression>
                                 <primaryExpression>
                                    <numberLiteral>
                                       <decimalNumber>0</decimalNumber>
                                    </numberLiteral>
                                 </primaryExpression>
                              </expression>)</typeConversion>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</contractDefinition>
   <contractDefinition>contract<identifier>_0xSatoshi</identifier>is<inheritanceSpecifier>
         <userDefinedTypeName>
            <identifier>ERC20Interface</identifier>
         </userDefinedTypeName>
      </inheritanceSpecifier>,<inheritanceSpecifier>
         <userDefinedTypeName>
            <identifier>Owned</identifier>
         </userDefinedTypeName>
      </inheritanceSpecifier>{<contractPartDefinition>
         <usingForDeclaration>using<identifier>SafeMath</identifier>for<typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>;</usingForDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <usingForDeclaration>using<identifier>ExtendedMath</identifier>for<typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>;</usingForDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>string</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>symbol</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>string</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>name</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint8</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>decimals</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>_totalSupply</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>latestDifficultyPeriodStarted</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>epochCount</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>_BLOCKS_PER_READJUSTMENT</identifier>=<expression>
               <primaryExpression>
                  <numberLiteral>
                     <decimalNumber>1024</decimalNumber>
                  </numberLiteral>
               </primaryExpression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>_MINIMUM_TARGET</identifier>=<expression>
               <expression>
                  <primaryExpression>
                     <numberLiteral>
                        <decimalNumber>2</decimalNumber>
                     </numberLiteral>
                  </primaryExpression>
               </expression>
               <powerOperator>**</powerOperator>
               <expression>
                  <primaryExpression>
                     <numberLiteral>
                        <decimalNumber>16</decimalNumber>
                     </numberLiteral>
                  </primaryExpression>
               </expression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>_MAXIMUM_TARGET</identifier>=<expression>
               <expression>
                  <primaryExpression>
                     <numberLiteral>
                        <decimalNumber>2</decimalNumber>
                     </numberLiteral>
                  </primaryExpression>
               </expression>
               <powerOperator>**</powerOperator>
               <expression>
                  <primaryExpression>
                     <numberLiteral>
                        <decimalNumber>234</decimalNumber>
                     </numberLiteral>
                  </primaryExpression>
               </expression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>miningTarget</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>bytes32</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>challengeNumber</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>rewardEra</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>maxSupplyForEra</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>address</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>lastRewardTo</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>lastRewardAmount</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>lastRewardEthBlockNumber</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>bool</elementaryTypeName>
            </typeName>
            <identifier>locked</identifier>=<expression>
               <primaryExpression>
                  <booleanLiteral>false</booleanLiteral>
               </primaryExpression>
            </expression>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <mappingSt>mapping(<typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>=&gt;<typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>)</mappingSt>
            </typeName>
            <identifier>solutionForChallenge</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>tokensMinted</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <mappingSt>mapping(<typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>=&gt;<typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>)</mappingSt>
            </typeName>
            <identifier>balances</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <mappingSt>mapping(<typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>=&gt;<typeName>
                     <mappingSt>mapping(<typeName>
                           <elementaryTypeName>address</elementaryTypeName>
                        </typeName>=&gt;<typeName>
                           <elementaryTypeName>uint</elementaryTypeName>
                        </typeName>)</mappingSt>
                  </typeName>)</mappingSt>
            </typeName>
            <identifier>allowed</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint</elementaryTypeName>
            </typeName>
            <visibleType>public</visibleType>
            <identifier>burnPercent</identifier>;</stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <eventDefinition>event<identifier>Mint</identifier>
            <indexedParameterList>(<indexedParameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>indexed<identifier>from</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>reward_amount</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>epochCount</identifier>
               </indexedParameter>,<indexedParameter>
                  <typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>
                  <identifier>newChallengeNumber</identifier>
               </indexedParameter>)</indexedParameterList>;</eventDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>constructor<parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>symbol</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <stringLiteral>0xSATS</stringLiteral>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>name</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <stringLiteral>0xSatoshi</stringLiteral>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>decimals</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <numberLiteral>
                                 <decimalNumber>8</decimalNumber>
                              </numberLiteral>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>_totalSupply</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>210000</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                           <muldivOperator>
                              <mulOperator>*</mulOperator>
                           </muldivOperator>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <numberLiteral>
                                       <decimalNumber>10</decimalNumber>
                                    </numberLiteral>
                                 </primaryExpression>
                              </expression>
                              <powerOperator>**</powerOperator>
                              <expression>
                                 <typeConversion>
                                    <typeName>
                                       <elementaryTypeName>uint</elementaryTypeName>
                                    </typeName>(<expression>
                                       <primaryExpression>
                                          <identifier>decimals</identifier>
                                       </primaryExpression>
                                    </expression>)</typeConversion>
                              </expression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <primaryExpression>
                              <identifier>locked</identifier>
                           </primaryExpression>
                        </expression>
                     </condition>)<statement>
                        <throwRevertStatement>revert()</throwRevertStatement>;</statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>locked</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <booleanLiteral>true</booleanLiteral>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>tokensMinted</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <numberLiteral>
                                 <decimalNumber>0</decimalNumber>
                              </numberLiteral>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>rewardEra</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <numberLiteral>
                                 <decimalNumber>0</decimalNumber>
                              </numberLiteral>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>maxSupplyForEra</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>_totalSupply</identifier>
                              </primaryExpression>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>div</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>2</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>miningTarget</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_MAXIMUM_TARGET</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>latestDifficultyPeriodStarted</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <environmentalVariable>block.number</environmentalVariable>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>burnPercent</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <numberLiteral>
                                 <decimalNumber>21</decimalNumber>
                              </numberLiteral>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>_startNewMiningEpoch</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>()</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>mint</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>nonce</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>
                  <identifier>challenge_digest</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                     <identifier>success</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>bytes32</elementaryTypeName>
                              </typeName>
                              <identifier>digest</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>keccak256</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>abi</identifier>
                                          </primaryExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>encodePacked</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>challengeNumber</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <environmentalVariable>msg.sender</environmentalVariable>
                                                </expression>,<expression>
                                                   <primaryExpression>
                                                      <identifier>nonce</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>digest</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <identifier>challenge_digest</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <throwRevertStatement>revert()</throwRevertStatement>;</statement>
                  </ifStatement>
               </statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <typeConversion>
                                 <typeName>
                                    <elementaryTypeName>uint256</elementaryTypeName>
                                 </typeName>(<expression>
                                    <primaryExpression>
                                       <identifier>digest</identifier>
                                    </primaryExpression>
                                 </expression>)</typeConversion>
                           </expression>&gt;<expression>
                              <primaryExpression>
                                 <identifier>miningTarget</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <throwRevertStatement>revert()</throwRevertStatement>;</statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>bytes32</elementaryTypeName>
                              </typeName>
                              <identifier>solution</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>solutionForChallenge</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>challengeNumber</identifier>
                              </primaryExpression>
                           </expression>]</expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>solutionForChallenge</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>challengeNumber</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <primaryExpression>
                              <identifier>digest</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>solution</identifier>
                              </primaryExpression>
                           </expression>
                           <comparison>!=</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <hexNumber>0x0</hexNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <throwRevertStatement>revert()</throwRevertStatement>;</statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>reward_amount</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>getMiningReward</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>()</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>]</expression>=<expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>balances</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <environmentalVariable>msg.sender</environmentalVariable>
                              </expression>]</expression>.<functionCall>
                              <functionName>
                                 <identifier>add</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>reward_amount</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>tokensMinted</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>tokensMinted</identifier>
                              </primaryExpression>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>add</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>reward_amount</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>assert</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>tokensMinted</identifier>
                                       </primaryExpression>
                                    </expression>&lt;=<expression>
                                       <primaryExpression>
                                          <identifier>maxSupplyForEra</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>lastRewardTo</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <environmentalVariable>msg.sender</environmentalVariable>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>lastRewardAmount</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>reward_amount</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>lastRewardEthBlockNumber</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <environmentalVariable>block.number</environmentalVariable>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>_startNewMiningEpoch</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>()</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Mint</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>reward_amount</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>epochCount</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>challengeNumber</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>_startNewMiningEpoch</identifier>
            <parameterList>()</parameterList>
            <visibleType>internal</visibleType>
            <block>{<statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <expression>
                                 <expression>
                                    <primaryExpression>
                                       <identifier>tokensMinted</identifier>
                                    </primaryExpression>
                                 </expression>.<functionCall>
                                    <functionName>
                                       <identifier>add</identifier>
                                    </functionName>
                                    <callArguments>
                                       <tupleExpression>(<expression>
                                             <functionCall>
                                                <functionName>
                                                   <identifier>getMiningReward</identifier>
                                                </functionName>
                                                <callArguments>
                                                   <tupleExpression>()</tupleExpression>
                                                </callArguments>
                                             </functionCall>
                                          </expression>)</tupleExpression>
                                    </callArguments>
                                 </functionCall>
                              </expression>&gt;<expression>
                                 <primaryExpression>
                                    <identifier>maxSupplyForEra</identifier>
                                 </primaryExpression>
                              </expression>
                           </expression>&amp;&amp;<expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>rewardEra</identifier>
                                 </primaryExpression>
                              </expression>&lt;<expression>
                                 <primaryExpression>
                                    <numberLiteral>
                                       <decimalNumber>39</decimalNumber>
                                    </numberLiteral>
                                 </primaryExpression>
                              </expression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>rewardEra</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>rewardEra</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <plusminusOperator>
                                          <plusOperator>+</plusOperator>
                                       </plusminusOperator>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>1</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>maxSupplyForEra</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>_totalSupply</identifier>
                              </primaryExpression>
                           </expression>
                           <plusminusOperator>
                              <minusOperator>-</minusOperator>
                           </plusminusOperator>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>_totalSupply</identifier>
                                 </primaryExpression>
                              </expression>.<functionCall>
                                 <functionName>
                                    <identifier>div</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <expression>
                                             <primaryExpression>
                                                <numberLiteral>
                                                   <decimalNumber>2</decimalNumber>
                                                </numberLiteral>
                                             </primaryExpression>
                                          </expression>
                                          <powerOperator>**</powerOperator>
                                          <expression>
                                             <tupleExpression>(<expression>
                                                   <expression>
                                                      <primaryExpression>
                                                         <identifier>rewardEra</identifier>
                                                      </primaryExpression>
                                                   </expression>
                                                   <plusminusOperator>
                                                      <plusOperator>+</plusOperator>
                                                   </plusminusOperator>
                                                   <expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>1</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>
                                                </expression>)</tupleExpression>
                                          </expression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>epochCount</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>epochCount</identifier>
                              </primaryExpression>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>add</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>1</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>epochCount</identifier>
                                 </primaryExpression>
                              </expression>
                              <muldivOperator>
                                 <divRemOperator>%</divRemOperator>
                              </muldivOperator>
                              <expression>
                                 <primaryExpression>
                                    <identifier>_BLOCKS_PER_READJUSTMENT</identifier>
                                 </primaryExpression>
                              </expression>
                           </expression>
                           <comparison>==</comparison>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>0</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>_reAdjustDifficulty</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>()</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>challengeNumber</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <environmentalVariable>blockhash(<expression>
                                 <expression>
                                    <environmentalVariable>block.number</environmentalVariable>
                                 </expression>
                                 <plusminusOperator>
                                    <minusOperator>-</minusOperator>
                                 </plusminusOperator>
                                 <expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>1</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>
                              </expression>)</environmentalVariable>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>_reAdjustDifficulty</identifier>
            <parameterList>()</parameterList>
            <visibleType>internal</visibleType>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>ethBlocksSinceLastDifficultyPeriod</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <environmentalVariable>block.number</environmentalVariable>
                           </expression>
                           <plusminusOperator>
                              <minusOperator>-</minusOperator>
                           </plusminusOperator>
                           <expression>
                              <primaryExpression>
                                 <identifier>latestDifficultyPeriodStarted</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>epochsMined</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <primaryExpression>
                              <identifier>_BLOCKS_PER_READJUSTMENT</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>targetEthBlocksPerDiffPeriod</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>epochsMined</identifier>
                              </primaryExpression>
                           </expression>
                           <muldivOperator>
                              <mulOperator>*</mulOperator>
                           </muldivOperator>
                           <expression>
                              <primaryExpression>
                                 <numberLiteral>
                                    <decimalNumber>60</decimalNumber>
                                 </numberLiteral>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>ethBlocksSinceLastDifficultyPeriod</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>targetEthBlocksPerDiffPeriod</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <variableDeclaration>
                                          <typeName>
                                             <elementaryTypeName>uint</elementaryTypeName>
                                          </typeName>
                                          <identifier>excess_block_pct</identifier>
                                       </variableDeclaration>
                                    </expression>=<expression>
                                       <expression>
                                          <tupleExpression>(<expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>targetEthBlocksPerDiffPeriod</identifier>
                                                   </primaryExpression>
                                                </expression>.<functionCall>
                                                   <functionName>
                                                      <identifier>mul</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <primaryExpression>
                                                               <numberLiteral>
                                                                  <decimalNumber>100</decimalNumber>
                                                               </numberLiteral>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>)</tupleExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>div</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>ethBlocksSinceLastDifficultyPeriod</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <variableDeclaration>
                                          <typeName>
                                             <elementaryTypeName>uint</elementaryTypeName>
                                          </typeName>
                                          <identifier>excess_block_pct_extra</identifier>
                                       </variableDeclaration>
                                    </expression>=<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>excess_block_pct</identifier>
                                             </primaryExpression>
                                          </expression>.<functionCall>
                                             <functionName>
                                                <identifier>sub</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>100</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>limitLessThan</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <numberLiteral>
                                                         <decimalNumber>1000</decimalNumber>
                                                      </numberLiteral>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>miningTarget</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>miningTarget</identifier>
                                          </primaryExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>sub</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>miningTarget</identifier>
                                                         </primaryExpression>
                                                      </expression>.<functionCall>
                                                         <functionName>
                                                            <identifier>div</identifier>
                                                         </functionName>
                                                         <callArguments>
                                                            <tupleExpression>(<expression>
                                                                  <primaryExpression>
                                                                     <numberLiteral>
                                                                        <decimalNumber>2000</decimalNumber>
                                                                     </numberLiteral>
                                                                  </primaryExpression>
                                                               </expression>)</tupleExpression>
                                                         </callArguments>
                                                      </functionCall>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>mul</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>excess_block_pct_extra</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>else<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <variableDeclaration>
                                          <typeName>
                                             <elementaryTypeName>uint</elementaryTypeName>
                                          </typeName>
                                          <identifier>shortage_block_pct</identifier>
                                       </variableDeclaration>
                                    </expression>=<expression>
                                       <expression>
                                          <tupleExpression>(<expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>ethBlocksSinceLastDifficultyPeriod</identifier>
                                                   </primaryExpression>
                                                </expression>.<functionCall>
                                                   <functionName>
                                                      <identifier>mul</identifier>
                                                   </functionName>
                                                   <callArguments>
                                                      <tupleExpression>(<expression>
                                                            <primaryExpression>
                                                               <numberLiteral>
                                                                  <decimalNumber>100</decimalNumber>
                                                               </numberLiteral>
                                                            </primaryExpression>
                                                         </expression>)</tupleExpression>
                                                   </callArguments>
                                                </functionCall>
                                             </expression>)</tupleExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>div</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>targetEthBlocksPerDiffPeriod</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <variableDeclaration>
                                          <typeName>
                                             <elementaryTypeName>uint</elementaryTypeName>
                                          </typeName>
                                          <identifier>shortage_block_pct_extra</identifier>
                                       </variableDeclaration>
                                    </expression>=<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>shortage_block_pct</identifier>
                                             </primaryExpression>
                                          </expression>.<functionCall>
                                             <functionName>
                                                <identifier>sub</identifier>
                                             </functionName>
                                             <callArguments>
                                                <tupleExpression>(<expression>
                                                      <primaryExpression>
                                                         <numberLiteral>
                                                            <decimalNumber>100</decimalNumber>
                                                         </numberLiteral>
                                                      </primaryExpression>
                                                   </expression>)</tupleExpression>
                                             </callArguments>
                                          </functionCall>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>limitLessThan</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <numberLiteral>
                                                         <decimalNumber>1000</decimalNumber>
                                                      </numberLiteral>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>miningTarget</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>miningTarget</identifier>
                                          </primaryExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>add</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <expression>
                                                      <expression>
                                                         <primaryExpression>
                                                            <identifier>miningTarget</identifier>
                                                         </primaryExpression>
                                                      </expression>.<functionCall>
                                                         <functionName>
                                                            <identifier>div</identifier>
                                                         </functionName>
                                                         <callArguments>
                                                            <tupleExpression>(<expression>
                                                                  <primaryExpression>
                                                                     <numberLiteral>
                                                                        <decimalNumber>2000</decimalNumber>
                                                                     </numberLiteral>
                                                                  </primaryExpression>
                                                               </expression>)</tupleExpression>
                                                         </callArguments>
                                                      </functionCall>
                                                   </expression>.<functionCall>
                                                      <functionName>
                                                         <identifier>mul</identifier>
                                                      </functionName>
                                                      <callArguments>
                                                         <tupleExpression>(<expression>
                                                               <primaryExpression>
                                                                  <identifier>shortage_block_pct_extra</identifier>
                                                               </primaryExpression>
                                                            </expression>)</tupleExpression>
                                                      </callArguments>
                                                   </functionCall>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>latestDifficultyPeriodStarted</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <environmentalVariable>block.number</environmentalVariable>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>miningTarget</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>_MINIMUM_TARGET</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>miningTarget</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <primaryExpression>
                                          <identifier>_MINIMUM_TARGET</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>miningTarget</identifier>
                              </primaryExpression>
                           </expression>&gt;<expression>
                              <primaryExpression>
                                 <identifier>_MAXIMUM_TARGET</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>miningTarget</identifier>
                                       </primaryExpression>
                                    </expression>=<expression>
                                       <primaryExpression>
                                          <identifier>_MAXIMUM_TARGET</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </ifStatement>
               </statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>getChallengeNumber</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bytes32</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <identifier>challengeNumber</identifier>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>getMiningDifficulty</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>_MAXIMUM_TARGET</identifier>
                           </primaryExpression>
                        </expression>.<functionCall>
                           <functionName>
                              <identifier>div</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <primaryExpression>
                                       <identifier>miningTarget</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>getMiningTarget</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <identifier>miningTarget</identifier>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>getMiningReward</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <tupleExpression>(<expression>
                                 <expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>2</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>
                                 <muldivOperator>
                                    <mulOperator>*</mulOperator>
                                 </muldivOperator>
                                 <expression>
                                    <expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>10</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                    <powerOperator>**</powerOperator>
                                    <expression>
                                       <typeConversion>
                                          <typeName>
                                             <elementaryTypeName>uint</elementaryTypeName>
                                          </typeName>(<expression>
                                             <primaryExpression>
                                                <identifier>decimals</identifier>
                                             </primaryExpression>
                                          </expression>)</typeConversion>
                                    </expression>
                                 </expression>
                              </expression>)</tupleExpression>
                        </expression>.<functionCall>
                           <functionName>
                              <identifier>div</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>2</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                    <powerOperator>**</powerOperator>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>rewardEra</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>getMintDigest</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>nonce</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>
                  <identifier>challenge_digest</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>
                  <identifier>challenge_number</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bytes32</elementaryTypeName>
                     </typeName>
                     <identifier>digesttest</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>bytes32</elementaryTypeName>
                              </typeName>
                              <identifier>digest</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>keccak256</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>abi</identifier>
                                          </primaryExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>encodePacked</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>challenge_number</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <environmentalVariable>msg.sender</environmentalVariable>
                                                </expression>,<expression>
                                                   <primaryExpression>
                                                      <identifier>nonce</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <identifier>digest</identifier>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>checkMintSolution</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>nonce</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>
                  <identifier>challenge_digest</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>bytes32</elementaryTypeName>
                  </typeName>
                  <identifier>challenge_number</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>testTarget</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                     <identifier>success</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>bytes32</elementaryTypeName>
                              </typeName>
                              <identifier>digest</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <functionCall>
                              <functionName>
                                 <identifier>keccak256</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>abi</identifier>
                                          </primaryExpression>
                                       </expression>.<functionCall>
                                          <functionName>
                                             <identifier>encodePacked</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>challenge_number</identifier>
                                                   </primaryExpression>
                                                </expression>,<expression>
                                                   <environmentalVariable>msg.sender</environmentalVariable>
                                                </expression>,<expression>
                                                   <primaryExpression>
                                                      <identifier>nonce</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <ifStatement>if(<condition>
                        <expression>
                           <expression>
                              <typeConversion>
                                 <typeName>
                                    <elementaryTypeName>uint256</elementaryTypeName>
                                 </typeName>(<expression>
                                    <primaryExpression>
                                       <identifier>digest</identifier>
                                    </primaryExpression>
                                 </expression>)</typeConversion>
                           </expression>&gt;<expression>
                              <primaryExpression>
                                 <identifier>testTarget</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>)<statement>
                        <throwRevertStatement>revert()</throwRevertStatement>;</statement>
                  </ifStatement>
               </statement>
               <statement>
                  <returnStatement>return<expression>
                        <tupleExpression>(<expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>digest</identifier>
                                 </primaryExpression>
                              </expression>
                              <comparison>==</comparison>
                              <expression>
                                 <primaryExpression>
                                    <identifier>challenge_digest</identifier>
                                 </primaryExpression>
                              </expression>
                           </expression>)</tupleExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>totalSupply</identifier>
            <parameterList>()</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>_totalSupply</identifier>
                           </primaryExpression>
                        </expression>
                        <plusminusOperator>
                           <minusOperator>-</minusOperator>
                        </plusminusOperator>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <typeConversion>
                                 <typeName>
                                    <elementaryTypeName>address</elementaryTypeName>
                                 </typeName>(<expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>0</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>)</typeConversion>
                           </expression>]</expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>balanceOf</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>tokenOwner</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                     <identifier>balance</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>balances</identifier>
                           </primaryExpression>
                        </expression>[<expression>
                           <primaryExpression>
                              <identifier>tokenOwner</identifier>
                           </primaryExpression>
                        </expression>]</expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transfer</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>tokens</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                     <identifier>success</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>toBurn</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>tokens</identifier>
                                 </primaryExpression>
                              </expression>.<functionCall>
                                 <functionName>
                                    <identifier>mul</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>burnPercent</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>div</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>1000</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>toSend</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>tokens</identifier>
                              </primaryExpression>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>sub</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>toBurn</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>]</expression>=<expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>balances</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <environmentalVariable>msg.sender</environmentalVariable>
                              </expression>]</expression>.<functionCall>
                              <functionName>
                                 <identifier>sub</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>tokens</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>to</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>balances</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <primaryExpression>
                                    <identifier>to</identifier>
                                 </primaryExpression>
                              </expression>]</expression>.<functionCall>
                              <functionName>
                                 <identifier>add</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>toSend</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Transfer</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>to</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>toSend</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <typeConversion>
                                 <typeName>
                                    <elementaryTypeName>address</elementaryTypeName>
                                 </typeName>(<expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>0</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>)</typeConversion>
                           </expression>]</expression>=<expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>balances</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <typeConversion>
                                    <typeName>
                                       <elementaryTypeName>address</elementaryTypeName>
                                    </typeName>(<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>)</typeConversion>
                              </expression>]</expression>.<functionCall>
                              <functionName>
                                 <identifier>add</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>toBurn</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Transfer</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>,<expression>
                              <typeConversion>
                                 <typeName>
                                    <elementaryTypeName>address</elementaryTypeName>
                                 </typeName>(<expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>0</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>)</typeConversion>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>toBurn</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>approve</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>spender</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>tokens</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                     <identifier>success</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>allowed</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <environmentalVariable>msg.sender</environmentalVariable>
                              </expression>]</expression>[<expression>
                              <primaryExpression>
                                 <identifier>spender</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <primaryExpression>
                              <identifier>tokens</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Approval</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>spender</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>tokens</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transferFrom</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>from</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>to</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>tokens</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                     <identifier>success</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>toBurn</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>tokens</identifier>
                                 </primaryExpression>
                              </expression>.<functionCall>
                                 <functionName>
                                    <identifier>mul</identifier>
                                 </functionName>
                                 <callArguments>
                                    <tupleExpression>(<expression>
                                          <primaryExpression>
                                             <identifier>burnPercent</identifier>
                                          </primaryExpression>
                                       </expression>)</tupleExpression>
                                 </callArguments>
                              </functionCall>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>div</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>1000</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>toSend</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>tokens</identifier>
                              </primaryExpression>
                           </expression>.<functionCall>
                              <functionName>
                                 <identifier>sub</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>toBurn</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>from</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>balances</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <primaryExpression>
                                    <identifier>from</identifier>
                                 </primaryExpression>
                              </expression>]</expression>.<functionCall>
                              <functionName>
                                 <identifier>sub</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>tokens</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>allowed</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <primaryExpression>
                                    <identifier>from</identifier>
                                 </primaryExpression>
                              </expression>]</expression>[<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>]</expression>=<expression>
                           <expression>
                              <expression>
                                 <expression>
                                    <primaryExpression>
                                       <identifier>allowed</identifier>
                                    </primaryExpression>
                                 </expression>[<expression>
                                    <primaryExpression>
                                       <identifier>from</identifier>
                                    </primaryExpression>
                                 </expression>]</expression>[<expression>
                                 <environmentalVariable>msg.sender</environmentalVariable>
                              </expression>]</expression>.<functionCall>
                              <functionName>
                                 <identifier>sub</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>tokens</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>to</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>balances</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <primaryExpression>
                                    <identifier>to</identifier>
                                 </primaryExpression>
                              </expression>]</expression>.<functionCall>
                              <functionName>
                                 <identifier>add</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>toSend</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Transfer</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <primaryExpression>
                                 <identifier>from</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>to</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>toSend</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <typeConversion>
                                 <typeName>
                                    <elementaryTypeName>address</elementaryTypeName>
                                 </typeName>(<expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>0</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>)</typeConversion>
                           </expression>]</expression>=<expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>balances</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <typeConversion>
                                    <typeName>
                                       <elementaryTypeName>address</elementaryTypeName>
                                    </typeName>(<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>)</typeConversion>
                              </expression>]</expression>.<functionCall>
                              <functionName>
                                 <identifier>add</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>toBurn</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Transfer</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <primaryExpression>
                                 <identifier>from</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <typeConversion>
                                 <typeName>
                                    <elementaryTypeName>address</elementaryTypeName>
                                 </typeName>(<expression>
                                    <primaryExpression>
                                       <numberLiteral>
                                          <decimalNumber>0</decimalNumber>
                                       </numberLiteral>
                                    </primaryExpression>
                                 </expression>)</typeConversion>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>toBurn</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>allowance</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>tokenOwner</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>spender</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <stateMutability>
               <viewType>view</viewType>
            </stateMutability>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                     <identifier>remaining</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>allowed</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <primaryExpression>
                                 <identifier>tokenOwner</identifier>
                              </primaryExpression>
                           </expression>]</expression>[<expression>
                           <primaryExpression>
                              <identifier>spender</identifier>
                           </primaryExpression>
                        </expression>]</expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>approveAndCall</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>spender</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>tokens</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>bytes</elementaryTypeName>
                  </typeName>
                  <storageLocation>memory</storageLocation>
                  <identifier>data</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                     <identifier>success</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>allowed</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <environmentalVariable>msg.sender</environmentalVariable>
                              </expression>]</expression>[<expression>
                              <primaryExpression>
                                 <identifier>spender</identifier>
                              </primaryExpression>
                           </expression>]</expression>=<expression>
                           <primaryExpression>
                              <identifier>tokens</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <emitEventStatement>emit<identifier>Approval</identifier>
                     <callArguments>
                        <tupleExpression>(<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>spender</identifier>
                              </primaryExpression>
                           </expression>,<expression>
                              <primaryExpression>
                                 <identifier>tokens</identifier>
                              </primaryExpression>
                           </expression>)</tupleExpression>
                     </callArguments>
                  </emitEventStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <functionCall>
                              <functionName>
                                 <identifier>ApproveAndCallFallBack</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>spender</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>.<functionCall>
                           <functionName>
                              <identifier>receiveApproval</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <environmentalVariable>msg.sender</environmentalVariable>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>tokens</identifier>
                                    </primaryExpression>
                                 </expression>,<expression>
                                    <typeConversion>
                                       <typeName>
                                          <elementaryTypeName>address</elementaryTypeName>
                                       </typeName>(<expression>
                                          <environmentalVariable>this</environmentalVariable>
                                       </expression>)</typeConversion>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>data</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionFallBackDefinition>function<parameterList>()</parameterList>
            <visibleType>external</visibleType>
            <stateMutability>
               <payableType>payable</payableType>
            </stateMutability>
            <block>{<statement>
                  <throwRevertStatement>revert()</throwRevertStatement>;</statement>}</block>
         </functionFallBackDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>transferAnyERC20Token</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>address</elementaryTypeName>
                  </typeName>
                  <identifier>tokenAddress</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>tokens</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <identifier>onlyOwner</identifier>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                     <identifier>success</identifier>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <returnStatement>return<expression>
                        <expression>
                           <functionCall>
                              <functionName>
                                 <identifier>ERC20Interface</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>tokenAddress</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>.<functionCall>
                           <functionName>
                              <identifier>transfer</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <primaryExpression>
                                       <identifier>owner</identifier>
                                    </primaryExpression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <identifier>tokens</identifier>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</contractDefinition>&lt;EOF&gt;</sourceUnit>