<?xml version="1.0" encoding="UTF-8"?>
<sourceUnit>
   <pragmaDirective>pragma<pragmaSolidity>solidity<version>
            <versionLiteral>0.4.22</versionLiteral>
         </version>
      </pragmaSolidity>;</pragmaDirective>
   <contractDefinition>contract<identifier>Overflow</identifier>{<contractPartDefinition>
         <stateVariableDeclaration>
            <typeName>
               <elementaryTypeName>uint256</elementaryTypeName>
            </typeName>
            <identifier>amount</identifier>
         </stateVariableDeclaration>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>batchTransfer</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <typeName>
                        <elementaryTypeName>address</elementaryTypeName>
                     </typeName>[]</typeName>
                  <identifier>_receivers</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint256</elementaryTypeName>
                  </typeName>
                  <identifier>_value</identifier>
               </parameter>)</parameterList>
            <visibleType>public</visibleType>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>bool</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>cnt</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>_receivers</identifier>
                              </primaryExpression>
                           </expression>.length</expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <primaryExpression>
                              <identifier>amount</identifier>
                           </primaryExpression>
                        </expression>=<expression>
                           <expression>
                              <typeConversion>
                                 <typeName>
                                    <elementaryTypeName>uint256</elementaryTypeName>
                                 </typeName>(<expression>
                                    <primaryExpression>
                                       <identifier>cnt</identifier>
                                    </primaryExpression>
                                 </expression>)</typeConversion>
                           </expression>
                           <plusminusOperator>
                              <plusOperator>+</plusOperator>
                           </plusminusOperator>
                           <expression>
                              <primaryExpression>
                                 <identifier>_value</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>amount</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <muldivOperator>
                                          <divOperator>/</divOperator>
                                       </muldivOperator>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>cnt</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                    <comparison>==</comparison>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>_value</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>,<expression>
                                    <primaryExpression>
                                       <stringLiteral>SafeMath: multiplication overflow</stringLiteral>
                                    </primaryExpression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>cnt</identifier>
                                          </primaryExpression>
                                       </expression>&gt;<expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>&amp;&amp;<expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>cnt</identifier>
                                          </primaryExpression>
                                       </expression>&lt;=<expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>20</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>require</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>_value</identifier>
                                          </primaryExpression>
                                       </expression>&gt;<expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>&amp;&amp;<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>balances</identifier>
                                             </primaryExpression>
                                          </expression>[<expression>
                                             <environmentalVariable>msg.sender</environmentalVariable>
                                          </expression>]</expression>&gt;=<expression>
                                          <primaryExpression>
                                             <identifier>amount</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>balances</identifier>
                              </primaryExpression>
                           </expression>[<expression>
                              <environmentalVariable>msg.sender</environmentalVariable>
                           </expression>]</expression>=<expression>
                           <expression>
                              <expression>
                                 <primaryExpression>
                                    <identifier>balances</identifier>
                                 </primaryExpression>
                              </expression>[<expression>
                                 <environmentalVariable>msg.sender</environmentalVariable>
                              </expression>]</expression>.<functionCall>
                              <functionName>
                                 <identifier>sub</identifier>
                              </functionName>
                              <callArguments>
                                 <tupleExpression>(<expression>
                                       <primaryExpression>
                                          <identifier>amount</identifier>
                                       </primaryExpression>
                                    </expression>)</tupleExpression>
                              </callArguments>
                           </functionCall>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <forStatement>for(<expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>i</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <primaryExpression>
                              <numberLiteral>
                                 <decimalNumber>0</decimalNumber>
                              </numberLiteral>
                           </primaryExpression>
                        </expression>
                     </expression>;<condition>
                        <expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>i</identifier>
                              </primaryExpression>
                           </expression>&lt;<expression>
                              <primaryExpression>
                                 <identifier>cnt</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </condition>;<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>i</identifier>
                           </primaryExpression>
                        </expression>
                        <twoPlusMinusOperator>
                           <incrementOperator>++</incrementOperator>
                        </twoPlusMinusOperator>
                     </expression>)<statement>
                        <block>{<statement>
                              <expressionStatement>
                                 <expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>balances</identifier>
                                          </primaryExpression>
                                       </expression>[<expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>_receivers</identifier>
                                             </primaryExpression>
                                          </expression>[<expression>
                                             <primaryExpression>
                                                <identifier>i</identifier>
                                             </primaryExpression>
                                          </expression>]</expression>]</expression>=<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>balances</identifier>
                                             </primaryExpression>
                                          </expression>[<expression>
                                             <expression>
                                                <primaryExpression>
                                                   <identifier>_receivers</identifier>
                                                </primaryExpression>
                                             </expression>[<expression>
                                                <primaryExpression>
                                                   <identifier>i</identifier>
                                                </primaryExpression>
                                             </expression>]</expression>]</expression>.<functionCall>
                                          <functionName>
                                             <identifier>add</identifier>
                                          </functionName>
                                          <callArguments>
                                             <tupleExpression>(<expression>
                                                   <primaryExpression>
                                                      <identifier>_value</identifier>
                                                   </primaryExpression>
                                                </expression>)</tupleExpression>
                                          </callArguments>
                                       </functionCall>
                                    </expression>
                                 </expression>
                              </expressionStatement>;</statement>
                           <statement>
                              <expressionStatement>
                                 <expression>
                                    <functionCall>
                                       <functionName>
                                          <identifier>Transfer</identifier>
                                       </functionName>
                                       <callArguments>
                                          <tupleExpression>(<expression>
                                                <environmentalVariable>msg.sender</environmentalVariable>
                                             </expression>,<expression>
                                                <expression>
                                                   <primaryExpression>
                                                      <identifier>_receivers</identifier>
                                                   </primaryExpression>
                                                </expression>[<expression>
                                                   <primaryExpression>
                                                      <identifier>i</identifier>
                                                   </primaryExpression>
                                                </expression>]</expression>,<expression>
                                                <primaryExpression>
                                                   <identifier>_value</identifier>
                                                </primaryExpression>
                                             </expression>)</tupleExpression>
                                       </callArguments>
                                    </functionCall>
                                 </expression>
                              </expressionStatement>;</statement>}</block>
                     </statement>
                  </forStatement>
               </statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <booleanLiteral>true</booleanLiteral>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</contractDefinition>&lt;EOF&gt;</sourceUnit>