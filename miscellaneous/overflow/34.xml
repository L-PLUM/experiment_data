<?xml version="1.0" encoding="UTF-8"?>
<sourceUnit>
   <pragmaDirective>pragma<pragmaSolidity>solidity<version>
            <versionOperator>^</versionOperator>
            <versionLiteral>0.4.11</versionLiteral>
         </version>
      </pragmaSolidity>;</pragmaDirective>
   <libraryDefinition>library<identifier>SafeMathLibExt</identifier>{<contractPartDefinition>
         <functionDefinition>function<identifier>times</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>c</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>a</identifier>
                              </primaryExpression>
                           </expression>
                           <muldivOperator>
                              <mulOperator>*</mulOperator>
                           </muldivOperator>
                           <expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>assert</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>a</identifier>
                                          </primaryExpression>
                                       </expression>
                                       <comparison>==</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <numberLiteral>
                                                <decimalNumber>0</decimalNumber>
                                             </numberLiteral>
                                          </primaryExpression>
                                       </expression>
                                    </expression>||<expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>c</identifier>
                                             </primaryExpression>
                                          </expression>
                                          <muldivOperator>
                                             <divOperator>/</divOperator>
                                          </muldivOperator>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>a</identifier>
                                             </primaryExpression>
                                          </expression>
                                       </expression>
                                       <comparison>==</comparison>
                                       <expression>
                                          <primaryExpression>
                                             <identifier>b</identifier>
                                          </primaryExpression>
                                       </expression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <identifier>c</identifier>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>divides</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>assert</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>b</identifier>
                                       </primaryExpression>
                                    </expression>&gt;<expression>
                                       <primaryExpression>
                                          <numberLiteral>
                                             <decimalNumber>0</decimalNumber>
                                          </numberLiteral>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>c</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>a</identifier>
                              </primaryExpression>
                           </expression>
                           <muldivOperator>
                              <divOperator>/</divOperator>
                           </muldivOperator>
                           <expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>assert</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>a</identifier>
                                       </primaryExpression>
                                    </expression>
                                    <comparison>==</comparison>
                                    <expression>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>b</identifier>
                                             </primaryExpression>
                                          </expression>
                                          <muldivOperator>
                                             <mulOperator>*</mulOperator>
                                          </muldivOperator>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>c</identifier>
                                             </primaryExpression>
                                          </expression>
                                       </expression>
                                       <plusminusOperator>
                                          <plusOperator>+</plusOperator>
                                       </plusminusOperator>
                                       <expression>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>a</identifier>
                                             </primaryExpression>
                                          </expression>
                                          <muldivOperator>
                                             <divRemOperator>%</divRemOperator>
                                          </muldivOperator>
                                          <expression>
                                             <primaryExpression>
                                                <identifier>b</identifier>
                                             </primaryExpression>
                                          </expression>
                                       </expression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <identifier>c</identifier>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>minus</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>assert</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>b</identifier>
                                       </primaryExpression>
                                    </expression>&lt;=<expression>
                                       <primaryExpression>
                                          <identifier>a</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <expression>
                           <primaryExpression>
                              <identifier>a</identifier>
                           </primaryExpression>
                        </expression>
                        <plusminusOperator>
                           <minusOperator>-</minusOperator>
                        </plusminusOperator>
                        <expression>
                           <primaryExpression>
                              <identifier>b</identifier>
                           </primaryExpression>
                        </expression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>
      <contractPartDefinition>
         <functionDefinition>function<identifier>plus</identifier>
            <parameterList>(<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>a</identifier>
               </parameter>,<parameter>
                  <typeName>
                     <elementaryTypeName>uint</elementaryTypeName>
                  </typeName>
                  <identifier>b</identifier>
               </parameter>)</parameterList>
            <returnsParameters>returns<parameterList>(<parameter>
                     <typeName>
                        <elementaryTypeName>uint</elementaryTypeName>
                     </typeName>
                  </parameter>)</parameterList>
            </returnsParameters>
            <block>{<statement>
                  <expressionStatement>
                     <expression>
                        <expression>
                           <variableDeclaration>
                              <typeName>
                                 <elementaryTypeName>uint</elementaryTypeName>
                              </typeName>
                              <identifier>c</identifier>
                           </variableDeclaration>
                        </expression>=<expression>
                           <expression>
                              <primaryExpression>
                                 <identifier>a</identifier>
                              </primaryExpression>
                           </expression>
                           <plusminusOperator>
                              <plusOperator>+</plusOperator>
                           </plusminusOperator>
                           <expression>
                              <primaryExpression>
                                 <identifier>b</identifier>
                              </primaryExpression>
                           </expression>
                        </expression>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <expressionStatement>
                     <expression>
                        <functionCall>
                           <functionName>
                              <identifier>assert</identifier>
                           </functionName>
                           <callArguments>
                              <tupleExpression>(<expression>
                                    <expression>
                                       <primaryExpression>
                                          <identifier>c</identifier>
                                       </primaryExpression>
                                    </expression>&gt;=<expression>
                                       <primaryExpression>
                                          <identifier>a</identifier>
                                       </primaryExpression>
                                    </expression>
                                 </expression>)</tupleExpression>
                           </callArguments>
                        </functionCall>
                     </expression>
                  </expressionStatement>;</statement>
               <statement>
                  <returnStatement>return<expression>
                        <primaryExpression>
                           <identifier>c</identifier>
                        </primaryExpression>
                     </expression>
                  </returnStatement>;</statement>}</block>
         </functionDefinition>
      </contractPartDefinition>}</libraryDefinition>&lt;EOF&gt;</sourceUnit>