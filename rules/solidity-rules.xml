<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Rules>
    <Rule>
        <RuleId>solidity_integer_multiplication_overflow</RuleId>
            <Patterns>
                <Pattern patternId="mul101">
                    <!-- Looks for "like uint256 c=a*b;a or b is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="] and expression/expression[1]/variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/variableDeclaration/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression/primaryExpression/identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/variableDeclaration/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression/primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]//expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="mul102">
                    <!-- Looks for "like uint256 c; c=a*b;a or b is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition/returnsParameters/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        [not(ancestor::functionDefinition/identifier[text()[1]=(ancestor::contractDefinition/identifier)])]
                        [not(ancestor::functionDefinition[text()[1]= "constructor"])]
                        [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/primaryExpression/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression/primaryExpression/identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/primaryExpression/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression/primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression/primaryExpression/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]//expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="mul103">
                    <!-- Looks for "like uint newTokens = msg.value * PRESALE_PRICE/getprice();". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="] and expression/expression[1]/variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]
                        ]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/variableDeclaration/identifier)]
                        and expression/expression[2]/environmentalVariable[text()[1]= "msg.value"]
                        and expression//identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/variableDeclaration/identifier)]
                        and expression/expression[2]//identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        and expression/environmentalVariable[text()[1]= "msg.value"]
                        ])
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/environmentalVariable[text()[1]= "msg.value"]
                        and expression/expression[1]/expression//identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        and expression/expression[2]/environmentalVariable[text()[1]= "msg.value"]
                        and expression//identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/environmentalVariable[text()[1]= "msg.value"]
                        and expression/expression[1]/expression//identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        and expression/expression[2]//identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        and expression/environmentalVariable[text()[1]= "msg.value"]
                        ])
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]//expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                        and functionCall/callArguments/tupleExpression/expression/environmentalVariable[text()[1]= "msg.value"]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="mul104">
                    <!-- Looks for "like uint newTokens; newTokens= msg.value * PRESALE_PRICE/getprice();". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]
                        ]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/primaryExpression/identifier)]
                        and expression/expression[2]/environmentalVariable[text()[1]= "msg.value"]
                        and expression//identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[1]/primaryExpression/identifier)]
                        and expression/expression[2]//identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        and expression/environmentalVariable[text()[1]= "msg.value"]
                        ])
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/environmentalVariable[text()[1]= "msg.value"]
                        and expression/expression[1]/expression//identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        and expression/expression[2]/environmentalVariable[text()[1]= "msg.value"]
                        and expression//identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/environmentalVariable[text()[1]= "msg.value"]
                        and expression/expression[1]/expression//identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        and expression/expression[2]//identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]/expression//identifier)]
                        and expression/environmentalVariable[text()[1]= "msg.value"]
                        ])
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/muldivOperator/mulOperator]/expression[2]//expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                        and functionCall/callArguments/tupleExpression/expression/environmentalVariable[text()[1]= "msg.value"]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="mul105">
                    <!-- Looks for "like require(this.balance >= amount * sellPrice);amount is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[1][matches(text()[1],"^.balance$")]
                        and expression/expression[1]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                        or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier) and (text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier) and (text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[muldivOperator/mulOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="mul106">
                    <!-- Looks for "like require( amount * sellPrice<= this.balance);amount is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[2][matches(text()[1],"^.balance$")]
                        and expression/expression[2]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                        or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier) and (text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier) and (text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[muldivOperator/mulOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="mul107">
                    <!-- Looks for "like require(tokenLimit >= amount * sellPrice);amount is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier) and (text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier) and (text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[muldivOperator/mulOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="mul108">
                    <!-- Looks for "like require( amount * sellPrice<= tokenLimit); amount is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier) and (text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier) and (text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[muldivOperator/mulOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="mul109">
                    <!-- Looks for "like amount *= mintedAmount; mintedAmount is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/mulLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier) and (text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier) and (text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)  or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="mul110">
                    <!-- Looks for "like balanceOf[target] *= mintedAmount; mintedAmount is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/mulLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/expression[1]/primaryExpression/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/expression[2]/primaryExpression/identifier)]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression[1]/expression/expression[1]/primaryExpression/identifier)]
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression[1]/expression/expression[2]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="mul111">
                    <!-- Looks for "like balanceOf[msg.sender] *= mintedAmount; mintedAmount is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/mulLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/expression[1]/primaryExpression/identifier)]
                        and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression[1]/expression/expression[1]/primaryExpression/identifier)]
                        and expression/expression[2]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="mul112">
                    <!-- Looks for "like allowance[msg.sender][target] *= mintedAmount; mintedAmount is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/mulLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]]
                        ]]
                        [not(ancestor::functionDefinition//(expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[1]/expression/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]
                        | expression[comparison[text()[1] = "=="]
                        and expression/muldivOperator/divOperator
                        and expression/expression[1]/muldivOperator/mulOperator
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[1]/expression/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression[1]/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression[1]/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression[1]/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/preceding-sibling::expression/expression[1]/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/mulLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and functionCall/functionName/identifier[matches(text()[1],"mul|Mul")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
            </Patterns>
        </Rule>
    <Rule>
        <RuleId>solidity_integer_addition_overflow</RuleId>
            <Patterns>
                <Pattern patternId="add101">
                    <!-- Looks for "like uint256 c=a+b;a or b is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1]/variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        [not(ancestor::libraryDefinition/identifier[matches(text()[1],"Math")])]
                        [not(ancestor::contractDefinition/identifier[matches(text()[1],"Math")])]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[1]/variableDeclaration/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]/expression/primaryExpression/identifier)]]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[1]/variableDeclaration/identifier)]]
                        [expression//primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]])
                        )]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression//primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or expression[2]//primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                        ]
                        |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression//primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        or expression[1]//primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add102">
                    <!-- Looks for "like uint256 c; c=a+b;a or b is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        [not(expression/expression[2]/expression//primaryExpression/identifier[text()[1]=
                        (ancestor:: expressionStatement/expression/expression[1]/primaryExpression/identifier)])]
                        [not(ancestor::functionDefinition/identifier[text()[1]=(ancestor::contractDefinition/identifier)])]
                        [not(ancestor::functionDefinition[text()[1]= "constructor"])]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[1]/primaryExpression/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]/expression/primaryExpression/identifier)]]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[1]/primaryExpression/identifier)]]
                        [expression//primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]])
                        )]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression//primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or expression[2]//primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression//primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        or expression[1]//primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]//expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add103">
                    <!-- Looks for "like uint256 c; c=c+b; b is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/plusOperator]/expression[2]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add104">
                    <!-- Looks for "like balances[_to] = balances[_to]+_value; _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        [not(ancestor::functionDefinition/identifier[text()[1] = "transfer" or text()[1] = "transferFrom"])]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)]
                        )]]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)]
                        )]])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add105">
                    <!-- Looks for "like balances[msg.sender] = balances[msg.sender]+ _value; _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"])]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"])]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add106">
                    <!-- Looks for "like allowed[_to][msg.sender]=allowed[_to][msg.sender]+_value; _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]]
                        [expression[expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression[2]/plusminusOperator/plusOperator
                        and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                        and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add107">
                    <!-- Looks for "like uint newTokens = msg.value * PRICE; uint256 c; c=c+ newTokens;". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        ]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add108">
                    <!-- Looks for "like uint newTokens = msg.value * PRICE; balances[_to] = balances[_to]+ newTokens;". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)]
                        )]]
                        |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)]
                        )]])
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add109">
                    <!-- Looks for "like uint newTokens = msg.value * PRICE; balances[msg.sender] = balances[msg.sender]+ newTokens;". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"])]
                        ]
                        |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"])]
                        ])
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add110">
                    <!-- Looks for "like uint newTokens = msg.value * PRICE; allowed[_to][msg.sender]=allowed[_to][msg.sender]+ newTokens;". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                        ]
                        |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                        ])
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add111">
                    <!-- Looks for "like uint newTokens = _value * PRICE;uint256 c; c=c+ newTokens; _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add112">
                    <!-- Looks for "like uint newTokens = _value * PRICE;balances[_to] = balances[_to]+ newTokens; _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/expression[1]/primaryExpression/identifier) and text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/expression[2]/primaryExpression/identifier) and (text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)]
                        )]]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/expression[1]/primaryExpression/identifier) and text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression/expression[2]/primaryExpression/identifier) and (text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)]
                        )]])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add113">
                    <!-- Looks for "like uint newTokens = _value * PRICE;balances[msg.sender] = balances[msg.sender]+ newTokens; _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"])]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"])]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add114">
                    <!-- Looks for "like uint newTokens = _value * PRICE;allowed[_to][msg.sender]=allowed[_to][msg.sender]+ newTokens; _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/plusOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add115">
                    <!-- Looks for "like amount += mintedAmount;  mintedAmount is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/plusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add116">
                    <!-- Looks for "like balanceOf[target] += mintedAmount;  mintedAmount is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/plusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition/identifier[text()[1] = "transfer" or text()[1] = "transferFrom"])]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)])]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)])]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add117">
                    <!-- Looks for "like balanceOf[msg.sender] += mintedAmount;  mintedAmount is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/plusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"])]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"])]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add118">
                    <!-- Looks for "like allowance[msg.sender][target] += mintedAmount; mintedAmount is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/plusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add119">
                    <!-- Looks for "like uint newTokens = msg.value * PRICE;amount += newTokens;". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/plusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add120">
                    <!-- Looks for "like uint newTokens = msg.value * PRICE;balanceOf[target] += newTokens;". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/plusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        ]]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)])]
                        ]
                        |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)])]
                        ])
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add121">
                    <!-- Looks for "like uint newTokens = msg.value * PRICE;balanceOf[msg.sender] += newTokens;". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/plusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"])]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"])]
                        ])
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add122">
                    <!-- Looks for "like uint newTokens = msg.value * PRICE;allowance[msg.sender][target] += newTokens;". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/plusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]]
                        ]]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                        ])
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add123">
                    <!-- Looks for "like uint newTokens = _value * PRICE;amount += newTokens; _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/plusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add124">
                    <!-- Looks for "like uint newTokens = _value * PRICE;balanceOf[target] += newTokens; _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/plusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)])]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)])]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add125">
                    <!-- Looks for "like uint newTokens = _value * PRICE;balanceOf[msg.sender] += newTokens; _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/plusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"])]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"])]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add126">
                    <!-- Looks for "like uint newTokens = _value * PRICE;allowance[msg.sender][target] += newTokens; _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/plusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[text()[1]="[" and text()[2]="]"]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression[1][primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)] or (expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]= (parent::*/parent::*/parent::*/following-sibling::expression/expression/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]])]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/plusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add127">
                    <!-- Looks for "like require(totalSupply + _value <= tokenLimit; _value is parameter,tokenLimit is var or constant". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                        and expression/expression[1]/plusminusOperator/plusOperator
                        and expression/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and expression/expression[2][text()="."]
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                        and expression/expression[2]/functionCall/functionName/identifier[text()="add"] and expression/expression[2]/functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=(ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add128">
                    <!-- Looks for "like require(tokenLimit >=totalSupply + _value; _value is parameter,tokenLimit is var or constant". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and expression/expression[2][text()="."]
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                        and expression/expression[2]/functionCall/functionName/identifier[text()="add"] and expression/expression[2]/functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=(ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add129">
                    <!-- Looks for "like require( totalSupply + _value <= this.balance); _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                        and expression/expression[1]/plusminusOperator/plusOperator
                        and expression/expression[2][matches(text()[1],"^.balance$")]
                        and expression/expression[2]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                        or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and expression/expression[2][text()="."]
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                        and expression/expression[2]/functionCall/functionName/identifier[text()="add"] and expression/expression[2]/functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=(ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add130">
                    <!-- Looks for "like require(this.balance >= totalSupply + _value); _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[1][matches(text()[1],"^.balance$")]
                        and expression/expression[1]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                        or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and expression/expression[2][text()="."]
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                        and expression/expression[2]/functionCall/functionName/identifier[text()="add"] and expression/expression[2]/functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=(ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add131">
                    <!-- Looks for "like uint newTokens = _value * PRICE;require(presaleSoldTokens + newTokens <= PRESALE); _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                        and expression/expression[1]/plusminusOperator/plusOperator
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add132">
                    <!-- Looks for "like uint newTokens = _value * PRICE;require(PRESALE>=presaleSoldTokens+newTokens); _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add133">
                    <!-- Looks for "like uint newTokens = _value * PRICE;require( totalSupply + token <= this.balance);  _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                        and expression/expression[1]/plusminusOperator/plusOperator
                        and expression/expression[2][matches(text()[1],"^.balance$")]
                        and expression/expression[2]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                        or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add134">
                    <!-- Looks for "like uint newTokens = _value * PRICE;require(this.balance >= totalSupply + token); _value is parameter". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[1][matches(text()[1],"^.balance$")]
                        and expression/expression[1]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                        or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add135">
                    <!-- Looks for "like uint newTokens = msg.value * PRESALE_PRICE;require(presaleSoldTokens + newTokens <= PRESALE_TOKEN_SUPPLY_LIMIT);  PRESALE_TOKEN_SUPPLY_LIMIT is var or constant". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                        and expression/expression[1]/plusminusOperator/plusOperator
                        and expression/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        ]]
                        [parent::*/parent::*/parent::*/preceding-sibling::statement//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and expression/expression[2][text()="."]
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                        and expression/expression[2]/functionCall/functionName/identifier[text()="add"] and expression/expression[2]/functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=(ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add136">
                    <!-- Looks for "like uint newTokens = msg.value * PRESALE_PRICE;require(PRESALE_TOKEN_SUPPLY_LIMIT >=presaleSoldTokens + newTokens);  PRESALE_TOKEN_SUPPLY_LIMIT is var or constant". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        ]]
                        [parent::*/parent::*/parent::*/preceding-sibling::statement//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and expression/expression[2][text()="."]
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                        and expression/expression[2]/functionCall/functionName/identifier[text()="add"] and expression/expression[2]/functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=(ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add137">
                    <!-- Looks for "like uint newTokens = msg.value * PRESALE_PRICE;require(presaleSoldTokens + newTokens <= this.balance);". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&lt;="]
                        and expression/expression[1]/plusminusOperator/plusOperator
                        and expression/expression[2][matches(text()[1],"^.balance$")]
                        and expression/expression[2]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                        or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[1]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        ]]
                        [parent::*/parent::*/parent::*/preceding-sibling::statement//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="add138">
                    <!-- Looks for "like uint newTokens = msg.value * PRESALE_PRICE;require(this.balance >=presaleSoldTokens+newTokens);". -->
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //functionCall
                        [functionName/identifier[text()[1] = "require"]]
                        [callArguments/tupleExpression[expression[text()[1] = "&gt;="]
                        and expression/expression[2]/plusminusOperator/plusOperator
                        and expression/expression[1][matches(text()[1],"^.balance$")]
                        and expression/expression[1]/expression[1][environmentalVariable[text()[1]="this"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[text()[1]="address"]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)
                        or text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[text()[1]="address"]]/identifier)]]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        ]]
                        [parent::*/parent::*/parent::*/preceding-sibling::statement//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]
                        ]]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[1][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[2]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[2][plusminusOperator/plusOperator
                        and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [expression[1]/primaryExpression/identifier[text()[1]= (parent::*/parent::*/following-sibling::expression/expression/primaryExpression/identifier)]
                        ])
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//functionCall//expression[plusminusOperator/plusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"add|Add")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
            </Patterns>
        </Rule>
    <Rule>
        <RuleId>solidity_integer_subtraction_overflow</RuleId>
            <Patterns>
                <Pattern patternId="sub101">
                    <Categories>
                        <!-- Looks for "like uint256 c; c=a-b or like uint256 c=a-b;a or b is parameter". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or
                        primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/plusminusOperator/minusOperator
                        and expression/expression[2]/expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        [not(expression/expression[2]/expression//primaryExpression/identifier[text()[1]=
                        (ancestor:: expressionStatement/expression/expression[1]/primaryExpression/identifier)])]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression//primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression//primaryExpression/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]//primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]//expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub102">
                    <Categories>
                        <!-- Looks for "like uint256 c; c=c-b; b is parameter". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/plusminusOperator/minusOperator
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        [not(ancestor::functionDefinition/identifier[matches(text()[1],"burn")])]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub103">
                    <Categories>
                        <!-- Looks for "like balances[_to] = balances[_to]-_value; _value is parameter". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        and expression/expression[2]/plusminusOperator/minusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/primaryExpression/identifier) and text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub104">
                    <Categories>
                        <!-- Looks for "like balances[msg.sender] = balances[msg.sender]- _value; _value is parameter". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and expression/expression[2]/plusminusOperator/minusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/primaryExpression/identifier) and text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub105">
                    <Categories>
                        <!-- Looks for "like allowed[_to][msg.sender] = allowed[_to][msg.sender]- _value; _value is parameter". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]]
                        [expression[expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression[2]/plusminusOperator/minusOperator
                        and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                        and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub106">
                    <Categories>
                        <!-- Looks for "like uint newTokens = msg.value * PRICE;  uint256 c; c=c-newTokens; ". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/plusminusOperator/minusOperator
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        ]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/primaryExpression/identifier) and (text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub107">
                    <Categories>
                        <!-- Looks for "like uint newTokens = msg.value * PRICE;  balances[_to] = balances[_to]- newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        and expression/expression[2]/plusminusOperator/minusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/primaryExpression/identifier) and text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub108">
                    <Categories>
                        <!-- Looks for "like uint newTokens = msg.value * PRICE; balances[msg.sender] = balances[msg.sender]- newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and expression/expression[2]/plusminusOperator/minusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/primaryExpression/identifier) and text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub109">
                    <Categories>
                        <!-- Looks for "like uint newTokens = msg.value * PRICE; allowed[_to][msg.sender] = allowed[_to][msg.sender]- newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]]
                        [expression[expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression[2]/plusminusOperator/minusOperator
                        and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                        and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub110">
                    <Categories>
                        <!-- Looks for "like uint newTokens = _value * PRICE; c=c-newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression/expression[2]/plusminusOperator/minusOperator
                        and expression/expression[2]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/preceding-sibling::expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub111">
                    <Categories>
                        <!-- Looks for "like uint newTokens = _value * PRICE; balances[_to] = balances[_to]- newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        and expression/expression[2]/plusminusOperator/minusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        ]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/primaryExpression/identifier) and text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub112">
                    <Categories>
                        <!-- Looks for "like uint newTokens = _value * PRICE; balances[msg.sender] = balances[msg.sender]- newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]
                        and expression/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and expression/expression[2]/plusminusOperator/minusOperator
                        and expression/expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression/expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)]
                        and expression/expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/primaryExpression/identifier) and text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub113">
                    <Categories>
                        <!-- Looks for "like uint newTokens = _value * PRICE; allowed[_to][msg.sender] = allowed[_to][msg.sender]- newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement[expression[text()="="]]
                        [expression[expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression[2]/plusminusOperator/minusOperator
                        and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)]
                        and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (parent::*/parent::*/parent::*/parent::*/preceding-sibling::expression/expression/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression/plusminusOperator/minusOperator]/expression[2]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression/expression[2][plusminusOperator/minusOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub114">
                    <Categories>
                        <!-- Looks for "like _totalSupply -=_amount;  _amount is parameter". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition/identifier[matches(text()[1],"burn")])]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub115">
                    <Categories>
                        <!-- Looks for "like balances[_spender] -= _amount;  _amount is parameter". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=  (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and
                        expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                        ])
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub116">
                    <Categories>
                        <!-- Looks for "like balances[msg.sender] -= _amount;  _amount is parameter". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[2]/environmentalVariable[text()="msg.sender"]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=  (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                        ])
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub117">
                    <Categories>
                        <!-- Looks for "like allowed[msg.sender][_spender] -= _amount;  _amount is parameter". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]]
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                        ])
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub118">
                    <Categories>
                        <!-- Looks for "like uint newTokens = msg.value * PRICE; _totalSupply -= newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub119">
                    <Categories>
                        <!-- Looks for "like uint newTokens = msg.value * PRICE; balances[_spender] -= newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        ]]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=  (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and
                        expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                        ])
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub120">
                    <Categories>
                        <!-- Looks for "like uint newTokens = msg.value * PRICE; balances[msg.sender] -= newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[2]/environmentalVariable[text()="msg.sender"]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=  (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                        ])
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub121">
                    <Categories>
                        <!-- Looks for "like uint newTokens = msg.value * PRICE; allowed[msg.sender][_spender] -= newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]]
                        ]]
                        [(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement[expression[text()="="]
                        and expression/expression[1][variableDeclaration/typeName/elementaryTypeName[matches(text()[1],"uint|int")] or primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]
                        and expression/expression[2]/muldivOperator/mulOperator
                        and expression/expression[2]/expression/environmentalVariable[matches(text()[1],"^msg.value$")]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier)]]
                        )]
                        [not(ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/environmentalVariable[matches(text()[1],"^msg.value$")]]]/expression[1]//identifier) and text()[1]=
                        (ancestor::contractPartDefinition/(functionDefinition|functionFallBackDefinition)//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                        ])
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub122">
                    <Categories>
                        <!-- Looks for "like uint newTokens = _value * PRICE; totalSupply -= newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub123">
                    <Categories>
                        <!-- Looks for "like uint newTokens = _value * PRICE; balances[_spender] -= newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=  (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and
                        expression[2]/expression[1]/expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                        ])
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub124">
                    <Categories>
                        <!-- Looks for "like uint newTokens = _value * PRICE; balances[msg.sender] -= newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[2]/environmentalVariable[text()="msg.sender"]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        | expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=  (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)] and expression[2]/expression[1]/expression[2]/environmentalVariable[text()="msg.sender"] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                        ])
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub125">
                    <Categories>
                        <!-- Looks for "like uint newTokens = _value * PRICE; allowed[msg.sender][_spender] -= newTokens;". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]]
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//expression[text()="."]
                        [expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1] [text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and functionCall/functionName/identifier[matches(text()[1],"sub|Sub")]
                        and functionCall/callArguments/tupleExpression/expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        )]
                        [not(ancestor::functionDefinition//(expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]]
                        |expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[expression[2]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[2]/expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier)] or environmentalVariable[text()="msg.sender"]] and expression[2]/plusminusOperator/minusOperator]/expression[1]/(variableDeclaration|primaryExpression)/identifier)]
                        ]
                        [expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[expression[2][muldivOperator/mulOperator and expression/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]]]/expression[1]/(variableDeclaration|primaryExpression)/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier)]
                        ])
                        )]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub126">
                    <Categories>
                        <!-- Looks for "like _totalSupply -= 2000 * 10**8; in loop; ". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[2]//primaryExpression/numberLiteral/decimalNumber
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]]
                        [expression//primaryExpression/numberLiteral/decimalNumber[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]//primaryExpression/numberLiteral/decimalNumber)]]
                        )]
                        [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                        [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub127">
                    <Categories>
                        <!-- Looks for "likebalances[owner] -= 2000 * 10**8;  in loop; ". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        and expression[2]//primaryExpression/numberLiteral/decimalNumber
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))]
                        ]]
                        [expression//primaryExpression/numberLiteral/decimalNumber[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression//primaryExpression/numberLiteral/decimalNumber)]]
                        )]
                        [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                        [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub128">
                    <Categories>
                        <!-- Looks for "like balances[msg.sender] -= 2000 * 10**8; in loop; ". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and expression[2]//primaryExpression/numberLiteral/decimalNumber
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression//primaryExpression/numberLiteral/decimalNumber[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression//primaryExpression/numberLiteral/decimalNumber)]]
                        )]
                        [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                        [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub129">
                    <Categories>
                        <!-- Looks for "like allowed[owner][msg.sender] -= 2000 * 10**8; in loop; ". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]]
                        and expression[2]//primaryExpression/numberLiteral/decimalNumber
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression//primaryExpression/numberLiteral/decimalNumber[text()[1]= (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression//primaryExpression/numberLiteral/decimalNumber)]]
                        )]
                        [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                        [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub130">
                    <Categories>
                        <!-- Looks for "like _totalSupply -= TOTAL; in loop; ". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[1]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")]]/identifier))]]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[2]/primaryExpression/identifier) and text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]]
                        )]
                        [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                        [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub131">
                    <Categories>
                        <!-- Looks for "like balances[owner] -= TOTAL; in loop; ". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression/primaryExpression/identifier) and text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]]
                        )]
                        [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                        [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub132">
                    <Categories>
                        <!-- Looks for "like balances[msg.sender] -= TOTAL; in loop; ". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier)]
                        and expression[1]/expression[2]/environmentalVariable[text()="msg.sender"]
                        and expression[2]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[2]/environmentalVariable[text()="msg.sender"]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression/primaryExpression/identifier) and text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]]
                        )]
                        [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                        [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                    </XPath>
                </Pattern>
                <Pattern patternId="sub133">
                    <Categories>
                        <!-- Looks for "like allowed[owner][msg.sender] -= TOTAL; in loop; ". -->
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>3</Severity>
                    <XPath>
                        //expressionStatement
                        [expression[lvalueOperator/minusLvalueOperator
                        and expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/expression[1]/primaryExpression/identifier[text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier)]
                        and expression[1]/expression[1]/expression[2][primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier)] or environmentalVariable[text()="msg.sender"]]
                        and expression[1]/expression[2][environmentalVariable[text()="msg.sender"] or primaryExpression/identifier[text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier)]]
                        and expression[2]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]
                        ]]
                        [not(ancestor::functionDefinition//expression[text()[1] = "&gt;" or text()[1] = "&lt;" or text()[1] = "&lt;=" or text()[1] = "&gt;="]
                        [expression[text()[1]="[" and text()[2]="]"]]
                        [expression[expression[1][text()[1]="[" and text()[2]="]"]
                        and expression[1]/expression[1]/primaryExpression/identifier[text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/mappingSt[typeName[1]/elementaryTypeName[matches(text()[1],"address")] and typeName[2]/elementaryTypeName[matches(text()[1],"uint|int")]]]]/identifier) and text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[1]/primaryExpression/identifier)]
                        and expression[1]/expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        and expression[2][primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression[1]/expression[2]/primaryExpression/identifier) and (text()[1]= (ancestor::functionDefinition/parameterList/parameter[typeName/elementaryTypeName[matches(text()[1],"address")]]/identifier) or text()[1]= (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|uint256")]]/identifier))] or environmentalVariable[text()="msg.sender"]]
                        ]]
                        [expression/primaryExpression/identifier[text()[1]=
                        (ancestor::functionDefinition//expressionStatement/expression[lvalueOperator/minusLvalueOperator]/expression/primaryExpression/identifier) and text()[1]=
                        (ancestor::sourceUnit//stateVariableDeclaration[typeName/elementaryTypeName[matches(text()[1],"uint|int")] and constantType[text()="constant"]]/identifier)]]
                        )]
                        [ancestor::statement/(forStatement|whileStatement|doWhileStatement)/condition/expression/expression[2][text()=".length"]]
                        [ancestor::functionDefinition/parameterList/parameter/typeName[typeName/elementaryTypeName[matches(text()[1],"address")]][text()="[]"]]
                    </XPath>
                </Pattern>
            </Patterns>
        </Rule>
    </Rules>