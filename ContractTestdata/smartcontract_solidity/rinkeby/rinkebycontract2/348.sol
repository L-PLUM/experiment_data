pragma solidity >=0.5.0;

import "./Ownable.sol";
import "./FarmerRole.sol";
import "./DistributorRole.sol";
import "./RetailerRole.sol";
import "./ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is FarmerRole, DistributorRole, RetailerRole, ConsumerRole {

    // Define 'owner'
    address payable owner;

    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint sku;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping (uint => Item) items;

    // Map sku to upc
    mapping (uint => uint) s2u;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping (uint => string[]) public itemsHistory;

    // Define enum 'State' with the following values:
    enum State
    {
        NotFarmed,       // 0
        Harvested,       // 1
        Processed,       // 2
        Packed,          // 3
        ForSale,         // 4
        Sold,            // 5
        Shipped,         // 6
        Received,        // 7
        Purchased,       // 8
        ReceivedPackaged // 9
    }

    State constant defaultState = State.NotFarmed;

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint    sku;  // Stock Keeping Unit (SKU)
        uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address payable originFarmerID; // Metamask-Ethereum address of the Farmer
        string  originFarmName; // Farmer Name
        string  originFarmInformation;  // Farmer Information
        string  originFarmLatitude; // Farm Latitude
        string  originFarmLongitude;  // Farm Longitude
        uint    productID;  // Product ID potentially a combination of upc + sku
        string  productNotes; // Product Notes
        uint    productPrice; // Product Price
        State   itemState;  // Product State as represented in the enum above
        address distributorID;  // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address payable consumerID; // Metamask-Ethereum address of the Consumer
    }

    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event Harvested(uint upc);
    event Processed(uint upc);
    event Packed(uint upc);
    event ForSale(uint upc);
    event Sold(uint upc);
    event Shipped(uint upc);
    event Received(uint upc);
    event Purchased(uint upc);
    event ReceivedPackaged(uint upc);

    // Define a modifer that checks to see if msg.sender == owner of the contract
    modifier onlyOwner() {
        require(msg.sender == owner, "not called by owner");
        _;
    }

    // Define a modifer that verifies the Caller
    modifier verifyCaller (address _address) {
        require(msg.sender == _address, "not called by expected user");
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) {
        require(msg.value >= _price, "not called with enough value");
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint _upc) {
        _;
        uint _price = items[_upc].productPrice;
        uint amountToReturn = msg.value - _price;
        items[_upc].consumerID.transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier harvested(uint _upc) {
        require(items[_upc].itemState == State.Harvested, "not in harvested state");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Processed
    modifier processed(uint _upc) {
        require(items[_upc].itemState == State.Processed, "not in processed state");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Packed
    modifier packed(uint _upc) {
        require(items[_upc].itemState == State.Packed, "not in packed state");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ForSale
    modifier forSale(uint _upc) {
        require(items[_upc].itemState == State.ForSale, "not in forsale state");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Sold
    modifier sold(uint _upc) {
        require(items[_upc].itemState == State.Sold, "not in sold state");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint _upc) {
        require(items[_upc].itemState == State.Shipped, "not in shipped state");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier received(uint _upc) {
        require(items[_upc].itemState == State.Received, "not in received state");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint _upc) {
        require(items[_upc].itemState == State.Purchased, "not in purchased state");
        _;
    }

    modifier notAProduct(uint _upc) {
        require(items[_upc].itemState == State.NotFarmed, "cannot reuse UPC");
        _;
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public payable {
        owner = msg.sender;
        sku = 1;
        upc = 1;
    }

    // Define a function 'kill' if required
    function kill() public {
        if (msg.sender == owner) {
            selfdestruct(owner);
        }
    }

    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function harvestItem(
        uint _upc,
        address payable _originFarmerID,
        string memory _originFarmName,
        string memory _originFarmInformation,
        string memory _originFarmLatitude,
        string memory _originFarmLongitude,
        string memory _productNotes) public onlyFarmer() notAProduct(_upc)
    {
        // slower, but better than a simple upc + sku
        bytes32 p1 = bytes32(_upc + sku);
        bytes memory p2 = abi.encodePacked(p1); // from https://ethereum.stackexchange.com/a/55963
        uint productID = uint(sha256(p2));

        items[_upc] = Item(sku, upc, _originFarmerID,
                           _originFarmerID, _originFarmName, _originFarmInformation,
                           _originFarmLatitude, _originFarmLongitude,
                           productID, _productNotes,
                           /* price */ 0,
                           /* state */ State.Harvested,
                           /* distributorID */ address(0),
                           /* retailerID */ address(0),
                           /* consumerID */ address(0)
            );

        s2u[sku] = _upc;

        // Increment sku
        sku = sku + 1;

        // Emit the appropriate event
        emit Harvested(_upc);
    }

    // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
    function processItem(uint _upc) public
        onlyFarmer()
        harvested(_upc)
        verifyCaller(items[_upc].originFarmerID)
    {
        items[_upc].itemState = State.Processed;
        emit Processed(_upc);
    }

    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
    function packItem(uint _upc) public
        onlyFarmer()
        processed(_upc)
        verifyCaller(items[_upc].originFarmerID)
    {
        items[_upc].itemState = State.Packed;
        emit Packed(_upc);
    }

    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    function sellItem(uint _upc, uint _price) public
        onlyFarmer()
        packed(_upc)
        verifyCaller(items[_upc].originFarmerID)
    {
        items[_upc].itemState = State.ForSale;
        items[_upc].productPrice = _price;
        emit ForSale(_upc);
    }

    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
    // and any excess ether sent is refunded back to the buyer
    function buyItem(uint _upc) public payable
        onlyDistributor()
        forSale(_upc)
        paidEnough(items[_upc].productPrice)
    {
        // Update the appropriate fields - ownerID, distributorID, itemState
        items[_upc].ownerID = msg.sender;
        items[_upc].distributorID = msg.sender;
        items[_upc].itemState = State.Sold;

        // Transfer money to farmer
        uint amountToReturn = msg.value - items[_upc].productPrice;
        items[_upc].originFarmerID.transfer(items[_upc].productPrice);
        msg.sender.transfer(amountToReturn);

        emit Sold(_upc);
    }

    // Define a function 'shipItem' that allows the farmer to mark an item 'Shipped'
    // Use the above modifers to check if the item is sold
    function shipItem(uint _upc) public
        onlyFarmer()
        sold(_upc)
        verifyCaller(items[_upc].originFarmerID)
    {
        items[_upc].itemState = State.Shipped;
        emit Shipped(_upc);
    }

    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
    // Use the above modifiers to check if the item is shipped
    function receiveItem(uint _upc) public
        onlyRetailer()
        shipped(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    {
        items[_upc].ownerID = msg.sender;
        items[_upc].retailerID = msg.sender;
        items[_upc].itemState = State.Received;

        // Emit the appropriate event
        emit Received(_upc);
    }

    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
    // Use the above modifiers to check if the item is received
    function purchaseItem(uint _upc) public payable received(_upc)
        onlyConsumer()
        paidEnough(items[_upc].productPrice)
        checkValue(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    {
        items[_upc].ownerID = msg.sender;
        items[_upc].consumerID = msg.sender;
        items[_upc].itemState = State.Purchased;

        // Emit the appropriate event
        emit Purchased(_upc);
    }

    function receivePackagedItem(uint _upc) public
        onlyConsumer()
        purchased(_upc)
        verifyCaller(items[_upc].consumerID)
    {
        items[_upc].itemState = State.ReceivedPackaged;
        emit ReceivedPackaged(_upc);
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint _upc) public view returns
        (
            uint    itemSKU,
            uint    itemUPC,
            address ownerID,
            address originFarmerID,
            string  memory originFarmName,
            string  memory originFarmInformation,
            string  memory originFarmLatitude,
            string  memory originFarmLongitude
            )
    {
        Item memory item = items[_upc];

        return
            (
                item.sku,
                item.upc,
                item.ownerID,
                item.originFarmerID,
                item.originFarmName,
                item.originFarmInformation,
                item.originFarmLatitude,
                item.originFarmLongitude
                );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint _upc) public view returns
        (
            uint    itemSKU,
            uint    itemUPC,
            uint    productID,
            string  memory productNotes,
            uint    productPrice,
            uint    itemState,
            address distributorID,
            address retailerID,
            address consumerID
            )
    {
        Item memory item = items[_upc];

        return
            (
                item.sku,
                item.upc,
                item.productID,
                item.productNotes,
                item.productPrice,
                uint(item.itemState),
                item.distributorID,
                item.retailerID,
                item.consumerID
                );
    }

    function upcForSKU(uint _sku) public view returns (uint)
    {
        return s2u[_sku];
    }

    function nextSKU() public view returns (uint)
    {
        return sku;
    }
}
