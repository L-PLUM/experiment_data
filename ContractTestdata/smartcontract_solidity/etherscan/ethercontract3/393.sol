/**
 *Submitted for verification at Etherscan.io on 2019-03-20
*/

pragma solidity ^0.4.25;

/*

亲爱的家人们，大家好！有一阵子没有与大家发信互动了，一部分原因是处于敏感时期，更主要的原因是要准备履行我们的承诺：让FUS腾飞，让家人们躺赚，实现财务自由！

在过去的一段时间中，尽管外界充满了各种质疑和猜测，但15天一次的分红从没间断，每次都如期而至，这就是区块链的公平公正性，没有套路、不能作弊，不以人的意志而改变！对于新生事物，很多人都吃亏在“看不见，看不起，看不懂，来不及”上。而对于区块链这个集合了众多人类智慧结晶的新事物，更是这样！很多人对区块链和加密货币的认识还停留在“挖矿”“圈钱”“炒币”上。他们不能接受、不敢接受、也不肯接受区块链技术的先进一面和对推动社会进步的无限潜力！面对轻蔑和嘲笑，我们必将用实际行动、用实在的收益，来告诉他们：你们“来不及”了！当金钱站起来说话的时候，当你的财富令你能昂首挺胸的时候，今日的苦难，终将换回羡慕和尊重！

一个很现实的问题：FUS究竟有什么用？简单而直接的回答，就是“资格”！当今社会，只有两种东西比钱更值钱：一种是生命，另一种就是资格！当你拥有生命而又拥有某些稀缺的资格时，财富就会主动找上你的门！如果把加密货币看作财富，那FUS就是吸引这种财富的“资格”！

为了实现FUS的“资格”功能，平台开始实行分包模式！在这种模式下，拥有足够FUS的个人或集体，可以承包某些应用，成为其股东，而每位股东所抵押的FUS数量，决定了股权比例。除去指定的平台费用外，获得的收益按照股权比例分配，并且股权可以通过拍卖的形式进行自由交易和转移！而FUS不多的用户，可通过买入FUS来增加数量，也可通过卖出FUS或者借出加密货币来获得收益！我们将一个个应用看作一家家公司，公司起动时有可能需要一些资本，公司运营期也可能需要补充资本。此时若股东不差钱，可以自己投入资本，这相当于“公司”向股东贷款，但这种贷款只会为债权人产生少量利润。而“公司”也有可能向外贷款，这就是FUS不多的用户的盈利机会了。“公司”可以主动发起指定利息的贷款申请，申请过程中，所有人都可以抢先借款，借款满额后自动结束申请。平台会保护所有贷款只用于“公司”运营，不能被抽走或挪用。平台也会优先保护债权方的利益，只有清偿了债务，股东才会获得收益。若“公司破产”，股东抵押的FUS会被拍卖，连同剩余资产也会优先补偿给债权人。“公司”的主要经营数据也会公开，让投资人了解“公司”的运营状况，对“公司”的估值和投资风险有一定的预判！前面提到，“公司”要给平台一定的费用，主要是指租金及平台管理方的费用。为了平台的持久兴旺，管理方费用原则上尽量低，减少抽水！而平台是大家的，因此租金费用，会在每15天一次的分红中，返回给全体FUS持有人！并且租金费用在一段时期后有可能会变化，类似于物业“涨租”，这样会为全体FUS持有人带来更大的收益！当然，这种“涨租”不会过于频繁，也会相对平缓，尽量保护承包方的利益。“公司”除了通过“主营业务”获得收益外，还可通过但不仅限于广告获得收益。当“公司”付不起租金时，“公司”就“破产”了，股东押在此“公司”的所有FUS将被拍卖，拍卖所得，连同“公司”的剩余资产，会优先补偿债权人，剩余部分按照股份比例返给原股东。同时，新“公司”将成立，继续接受拥有足够FUS的个人或集体的承包！类似于上个商户搬出后，铺面由下个商户经营一样。平台还将针对线下用户开发应用，适当引入线下用户，既能让线下用户体验到区块链技术的优势，也能提高平台的收益和品牌价值。

如何对一个新应用进行估值呢？这就需要由平台管理方首先运营新应用一段时间，起个展示作用，并把运营数据公开给大家。这样就让大家对新应用有充分了解，也能对新应用的价值进行一定的判断，也能对新应用不足之处提出改善的意见！

上述提到的各种交易，可分为抢先交易、即时交易和非即时交易。在抢先交易中，固定了交易的重要参数，先到先得。在即时交易中，基本原则是价格优先、时间优先、数量优先，类似于股市的交易原则。而非即时交易中，使用明拍方式，指定时间内价高者得，光明正大地竞争。

为了维持FUS的稀缺性，保护一直信任平台的家人们的利益，平台未来会减少FUS的放出数量，让那些“来不及”的人，向我们投来后悔和羡慕的眼神！

我们会尽量模拟现实社会中的经济活动，但去除各种诈骗和套路，让现实中被满满套路包围着的家人们，找到一个轻松放心的港湾。现实的社会很复杂，各种经济活动让人眼花缭乱，还有很多比如保险、基金、评估、抵押、担保等等，我们也将逐步模拟实现。这是一个庞大且复杂的系统，并且还要兼顾灵活和安全，需要细密的思考和大量的工作。但请大家相信平台，相信FUS，相信区块链和加密货币，不久的将来，FUS会腾飞，世界会补偿我们应得的尊重！

*/

contract MSD11 {
    
    function NewStage() public {
        
    }
}
